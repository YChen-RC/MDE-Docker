/**
 * generated by Xtext 2.30.0
 */
package org.xtext.example.mydocker.tests;

import com.google.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.xtext.example.mydocker.myDocker.Docker;

@ExtendWith(InjectionExtension.class)
@InjectWith(MyDockerInjectorProvider.class)
@SuppressWarnings("all")
public class MyDockerParsingTest {
  @Inject
  private ParseHelper<Docker> parseHelper;

  @Test
  public void loadModel() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("FROM a");
      final Docker result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void testFullDockerfile() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("FROM ubuntu:14.04");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("FROM foo");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("VOLUME /opt/nagios/var /opt/nagios/etc /opt/nagios/libexec /var/log/apache2 /usr/share/snmp/mibs");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("RUN echo hello\\");
      _builder.newLine();
      _builder.append("\t\t  ");
      _builder.append("world\\");
      _builder.newLine();
      _builder.append("\t\t  ");
      _builder.append("goodnight  \\");
      _builder.newLine();
      _builder.append("\t\t  ");
      _builder.append("moon\\");
      _builder.newLine();
      _builder.append("\t\t  ");
      _builder.append("light\\");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("ning");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("RUN echo hello  \\");
      _builder.newLine();
      _builder.append("\t\t  ");
      _builder.append("world");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("RUN echo hello  \\");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("world");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("RUN echo hello \\");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("goodbye\\");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("frog");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("RUN echo hello  \\  ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("world");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("RUN echo hi \\");
      _builder.newLine();
      _builder.append("\t\t ");
      _builder.append("\\");
      _builder.newLine();
      _builder.append("\t\t ");
      _builder.append("world \\");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("\\");
      _builder.newLine();
      _builder.append("\t\t ");
      _builder.append("good\\");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("\\");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("night");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("RUN echo goodbye\\");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("frog");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("RUN echo good\\");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("bye\\");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("frog");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("RUN echo hello \\");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("# this is a comment");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("# this is a comment with a blank line surrounding it");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("this is some more useful stuff");
      _builder.newLine();
      final Docker result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
