/*
 * generated by Xtext 2.30.0
 */
package org.xtext.example.mydocker.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.mydocker.ide.contentassist.antlr.internal.InternalMyDockerParser;
import org.xtext.example.mydocker.services.MyDockerGrammarAccess;

public class MyDockerParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MyDockerGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MyDockerGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getCommandAccess().getAlternatives(), "rule__Command__Alternatives");
			builder.put(grammarAccess.getCommandArgsAccess().getAlternatives(), "rule__CommandArgs__Alternatives");
			builder.put(grammarAccess.getJSONArgsAccess().getAlternatives(), "rule__JSONArgs__Alternatives");
			builder.put(grammarAccess.getNameValAccess().getAlternatives(), "rule__NameVal__Alternatives");
			builder.put(grammarAccess.getArgArgsAccess().getAlternatives(), "rule__ArgArgs__Alternatives");
			builder.put(grammarAccess.getHealthArgsAccess().getAlternatives(), "rule__HealthArgs__Alternatives");
			builder.put(grammarAccess.getValueAccess().getAlternatives(), "rule__Value__Alternatives");
			builder.put(grammarAccess.getExposeArgAccess().getAlternatives(), "rule__ExposeArg__Alternatives");
			builder.put(grammarAccess.getAddAccess().getGroup(), "rule__Add__Group__0");
			builder.put(grammarAccess.getArgAccess().getGroup(), "rule__Arg__Group__0");
			builder.put(grammarAccess.getCmdAccess().getGroup(), "rule__Cmd__Group__0");
			builder.put(grammarAccess.getCopyAccess().getGroup(), "rule__Copy__Group__0");
			builder.put(grammarAccess.getEntrypointAccess().getGroup(), "rule__Entrypoint__Group__0");
			builder.put(grammarAccess.getEnvAccess().getGroup(), "rule__Env__Group__0");
			builder.put(grammarAccess.getExposeAccess().getGroup(), "rule__Expose__Group__0");
			builder.put(grammarAccess.getFromAccess().getGroup(), "rule__From__Group__0");
			builder.put(grammarAccess.getHealthcheckAccess().getGroup(), "rule__Healthcheck__Group__0");
			builder.put(grammarAccess.getLabelAccess().getGroup(), "rule__Label__Group__0");
			builder.put(grammarAccess.getMaintainerAccess().getGroup(), "rule__Maintainer__Group__0");
			builder.put(grammarAccess.getOnbuildAccess().getGroup(), "rule__Onbuild__Group__0");
			builder.put(grammarAccess.getRunAccess().getGroup(), "rule__Run__Group__0");
			builder.put(grammarAccess.getShellAccess().getGroup(), "rule__Shell__Group__0");
			builder.put(grammarAccess.getStopSignalAccess().getGroup(), "rule__StopSignal__Group__0");
			builder.put(grammarAccess.getUserAccess().getGroup(), "rule__User__Group__0");
			builder.put(grammarAccess.getVolumeAccess().getGroup(), "rule__Volume__Group__0");
			builder.put(grammarAccess.getWorkdirAccess().getGroup(), "rule__Workdir__Group__0");
			builder.put(grammarAccess.getJSONArgsAccess().getGroup_0(), "rule__JSONArgs__Group_0__0");
			builder.put(grammarAccess.getJSONArgsAccess().getGroup_0_2(), "rule__JSONArgs__Group_0_2__0");
			builder.put(grammarAccess.getJSONArgsAccess().getGroup_1(), "rule__JSONArgs__Group_1__0");
			builder.put(grammarAccess.getSpaceArgsAccess().getGroup(), "rule__SpaceArgs__Group__0");
			builder.put(grammarAccess.getNameValAccess().getGroup_0(), "rule__NameVal__Group_0__0");
			builder.put(grammarAccess.getNameValAccess().getGroup_1(), "rule__NameVal__Group_1__0");
			builder.put(grammarAccess.getArgArgsAccess().getGroup_0(), "rule__ArgArgs__Group_0__0");
			builder.put(grammarAccess.getHealthArgsAccess().getGroup_1(), "rule__HealthArgs__Group_1__0");
			builder.put(grammarAccess.getOptionsAccess().getGroup(), "rule__Options__Group__0");
			builder.put(grammarAccess.getOptionAccess().getGroup(), "rule__Option__Group__0");
			builder.put(grammarAccess.getDockerAccess().getCommandsAssignment(), "rule__Docker__CommandsAssignment");
			builder.put(grammarAccess.getAddAccess().getCmdAssignment_0(), "rule__Add__CmdAssignment_0");
			builder.put(grammarAccess.getAddAccess().getArgsAssignment_1(), "rule__Add__ArgsAssignment_1");
			builder.put(grammarAccess.getArgAccess().getCmdAssignment_0(), "rule__Arg__CmdAssignment_0");
			builder.put(grammarAccess.getArgAccess().getArgsAssignment_1(), "rule__Arg__ArgsAssignment_1");
			builder.put(grammarAccess.getCmdAccess().getCmdAssignment_0(), "rule__Cmd__CmdAssignment_0");
			builder.put(grammarAccess.getCmdAccess().getArgsAssignment_1(), "rule__Cmd__ArgsAssignment_1");
			builder.put(grammarAccess.getCopyAccess().getCmdAssignment_0(), "rule__Copy__CmdAssignment_0");
			builder.put(grammarAccess.getCopyAccess().getArgsAssignment_1(), "rule__Copy__ArgsAssignment_1");
			builder.put(grammarAccess.getEntrypointAccess().getCmdAssignment_0(), "rule__Entrypoint__CmdAssignment_0");
			builder.put(grammarAccess.getEntrypointAccess().getArgsAssignment_1(), "rule__Entrypoint__ArgsAssignment_1");
			builder.put(grammarAccess.getEnvAccess().getCmdAssignment_0(), "rule__Env__CmdAssignment_0");
			builder.put(grammarAccess.getEnvAccess().getArgsAssignment_1(), "rule__Env__ArgsAssignment_1");
			builder.put(grammarAccess.getExposeAccess().getCmdAssignment_0(), "rule__Expose__CmdAssignment_0");
			builder.put(grammarAccess.getExposeAccess().getArgsAssignment_1(), "rule__Expose__ArgsAssignment_1");
			builder.put(grammarAccess.getFromAccess().getCmdAssignment_0(), "rule__From__CmdAssignment_0");
			builder.put(grammarAccess.getFromAccess().getArgsAssignment_1(), "rule__From__ArgsAssignment_1");
			builder.put(grammarAccess.getHealthcheckAccess().getCmdAssignment_0(), "rule__Healthcheck__CmdAssignment_0");
			builder.put(grammarAccess.getHealthcheckAccess().getArgsAssignment_1(), "rule__Healthcheck__ArgsAssignment_1");
			builder.put(grammarAccess.getLabelAccess().getCmdAssignment_0(), "rule__Label__CmdAssignment_0");
			builder.put(grammarAccess.getLabelAccess().getArgsAssignment_1(), "rule__Label__ArgsAssignment_1");
			builder.put(grammarAccess.getMaintainerAccess().getCmdAssignment_0(), "rule__Maintainer__CmdAssignment_0");
			builder.put(grammarAccess.getMaintainerAccess().getArgsAssignment_1(), "rule__Maintainer__ArgsAssignment_1");
			builder.put(grammarAccess.getOnbuildAccess().getCmdAssignment_0(), "rule__Onbuild__CmdAssignment_0");
			builder.put(grammarAccess.getOnbuildAccess().getArgsAssignment_1(), "rule__Onbuild__ArgsAssignment_1");
			builder.put(grammarAccess.getRunAccess().getCmdAssignment_0(), "rule__Run__CmdAssignment_0");
			builder.put(grammarAccess.getRunAccess().getArgsAssignment_1(), "rule__Run__ArgsAssignment_1");
			builder.put(grammarAccess.getShellAccess().getCmdAssignment_0(), "rule__Shell__CmdAssignment_0");
			builder.put(grammarAccess.getShellAccess().getArgsAssignment_1(), "rule__Shell__ArgsAssignment_1");
			builder.put(grammarAccess.getStopSignalAccess().getCmdAssignment_0(), "rule__StopSignal__CmdAssignment_0");
			builder.put(grammarAccess.getStopSignalAccess().getArgsAssignment_1(), "rule__StopSignal__ArgsAssignment_1");
			builder.put(grammarAccess.getUserAccess().getCmdAssignment_0(), "rule__User__CmdAssignment_0");
			builder.put(grammarAccess.getUserAccess().getArgsAssignment_1(), "rule__User__ArgsAssignment_1");
			builder.put(grammarAccess.getVolumeAccess().getCmdAssignment_0(), "rule__Volume__CmdAssignment_0");
			builder.put(grammarAccess.getVolumeAccess().getArgsAssignment_1(), "rule__Volume__ArgsAssignment_1");
			builder.put(grammarAccess.getWorkdirAccess().getCmdAssignment_0(), "rule__Workdir__CmdAssignment_0");
			builder.put(grammarAccess.getWorkdirAccess().getArgsAssignment_1(), "rule__Workdir__ArgsAssignment_1");
			builder.put(grammarAccess.getJSONArgsAccess().getArgsAssignment_0_1(), "rule__JSONArgs__ArgsAssignment_0_1");
			builder.put(grammarAccess.getJSONArgsAccess().getArgsAssignment_0_2_1(), "rule__JSONArgs__ArgsAssignment_0_2_1");
			builder.put(grammarAccess.getNameValsAccess().getValuesAssignment(), "rule__NameVals__ValuesAssignment");
			builder.put(grammarAccess.getNameValAccess().getKeyAssignment_0_0(), "rule__NameVal__KeyAssignment_0_0");
			builder.put(grammarAccess.getNameValAccess().getValueAssignment_0_1(), "rule__NameVal__ValueAssignment_0_1");
			builder.put(grammarAccess.getNameValAccess().getKeyAssignment_1_0(), "rule__NameVal__KeyAssignment_1_0");
			builder.put(grammarAccess.getNameValAccess().getValueAssignment_1_2(), "rule__NameVal__ValueAssignment_1_2");
			builder.put(grammarAccess.getArgArgsAccess().getValueAssignment_0_1(), "rule__ArgArgs__ValueAssignment_0_1");
			builder.put(grammarAccess.getArgArgsAccess().getValuesAssignment_1(), "rule__ArgArgs__ValuesAssignment_1");
			builder.put(grammarAccess.getHealthArgsAccess().getTypAssignment_0(), "rule__HealthArgs__TypAssignment_0");
			builder.put(grammarAccess.getHealthArgsAccess().getOptionsAssignment_1_0(), "rule__HealthArgs__OptionsAssignment_1_0");
			builder.put(grammarAccess.getHealthArgsAccess().getCmdArgsAssignment_1_2(), "rule__HealthArgs__CmdArgsAssignment_1_2");
			builder.put(grammarAccess.getOptionsAccess().getOptionsAssignment_1(), "rule__Options__OptionsAssignment_1");
			builder.put(grammarAccess.getOptionAccess().getOptionAssignment_1(), "rule__Option__OptionAssignment_1");
			builder.put(grammarAccess.getOptionAccess().getValueAssignment_3(), "rule__Option__ValueAssignment_3");
			builder.put(grammarAccess.getExposeArgsAccess().getPortsAssignment(), "rule__ExposeArgs__PortsAssignment");
			builder.put(grammarAccess.getExposeArgAccess().getPortAssignment_0(), "rule__ExposeArg__PortAssignment_0");
			builder.put(grammarAccess.getExposeArgAccess().getPort_protocolAssignment_1(), "rule__ExposeArg__Port_protocolAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MyDockerGrammarAccess grammarAccess;

	@Override
	protected InternalMyDockerParser createParser() {
		InternalMyDockerParser result = new InternalMyDockerParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyDockerGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyDockerGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
