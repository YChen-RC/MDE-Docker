/*
 * generated by Xtext 2.30.0
 */
grammar InternalMyDocker;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydocker.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydocker.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydocker.services.MyDockerGrammarAccess;

}

@parser::members {

 	private MyDockerGrammarAccess grammarAccess;

    public InternalMyDockerParser(TokenStream input, MyDockerGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Docker";
   	}

   	@Override
   	protected MyDockerGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleDocker
entryRuleDocker returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SH_COMMENT");
}:
	{ newCompositeNode(grammarAccess.getDockerRule()); }
	iv_ruleDocker=ruleDocker
	{ $current=$iv_ruleDocker.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule Docker
ruleDocker returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SH_COMMENT");
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getDockerAccess().getCommandsCommandParserRuleCall_0());
			}
			lv_commands_0_0=ruleCommand
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getDockerRule());
				}
				add(
					$current,
					"commands",
					lv_commands_0_0,
					"org.xtext.example.mydocker.MyDocker.Command");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleCommand
entryRuleCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCommandRule()); }
	iv_ruleCommand=ruleCommand
	{ $current=$iv_ruleCommand.current; }
	EOF;

// Rule Command
ruleCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCommandAccess().getAddParserRuleCall_0());
		}
		this_Add_0=ruleAdd
		{
			$current = $this_Add_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandAccess().getArgParserRuleCall_1());
		}
		this_Arg_1=ruleArg
		{
			$current = $this_Arg_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandAccess().getCmdParserRuleCall_2());
		}
		this_Cmd_2=ruleCmd
		{
			$current = $this_Cmd_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandAccess().getCopyParserRuleCall_3());
		}
		this_Copy_3=ruleCopy
		{
			$current = $this_Copy_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandAccess().getEntrypointParserRuleCall_4());
		}
		this_Entrypoint_4=ruleEntrypoint
		{
			$current = $this_Entrypoint_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandAccess().getEnvParserRuleCall_5());
		}
		this_Env_5=ruleEnv
		{
			$current = $this_Env_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandAccess().getExposeParserRuleCall_6());
		}
		this_Expose_6=ruleExpose
		{
			$current = $this_Expose_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandAccess().getFromParserRuleCall_7());
		}
		this_From_7=ruleFrom
		{
			$current = $this_From_7.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandAccess().getHealthcheckParserRuleCall_8());
		}
		this_Healthcheck_8=ruleHealthcheck
		{
			$current = $this_Healthcheck_8.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandAccess().getLabelParserRuleCall_9());
		}
		this_Label_9=ruleLabel
		{
			$current = $this_Label_9.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandAccess().getMaintainerParserRuleCall_10());
		}
		this_Maintainer_10=ruleMaintainer
		{
			$current = $this_Maintainer_10.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandAccess().getOnbuildParserRuleCall_11());
		}
		this_Onbuild_11=ruleOnbuild
		{
			$current = $this_Onbuild_11.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandAccess().getRunParserRuleCall_12());
		}
		this_Run_12=ruleRun
		{
			$current = $this_Run_12.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandAccess().getShellParserRuleCall_13());
		}
		this_Shell_13=ruleShell
		{
			$current = $this_Shell_13.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandAccess().getStopSignalParserRuleCall_14());
		}
		this_StopSignal_14=ruleStopSignal
		{
			$current = $this_StopSignal_14.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandAccess().getUserParserRuleCall_15());
		}
		this_User_15=ruleUser
		{
			$current = $this_User_15.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandAccess().getVolumeParserRuleCall_16());
		}
		this_Volume_16=ruleVolume
		{
			$current = $this_Volume_16.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandAccess().getWorkdirParserRuleCall_17());
		}
		this_Workdir_17=ruleWorkdir
		{
			$current = $this_Workdir_17.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAdd
entryRuleAdd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAddRule()); }
	iv_ruleAdd=ruleAdd
	{ $current=$iv_ruleAdd.current; }
	EOF;

// Rule Add
ruleAdd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_cmd_0_0='ADD'
				{
					newLeafNode(lv_cmd_0_0, grammarAccess.getAddAccess().getCmdADDKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAddRule());
					}
					setWithLastConsumed($current, "cmd", lv_cmd_0_0, "ADD");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAddAccess().getArgsCommandArgsParserRuleCall_1_0());
				}
				lv_args_1_0=ruleCommandArgs
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAddRule());
					}
					set(
						$current,
						"args",
						lv_args_1_0,
						"org.xtext.example.mydocker.MyDocker.CommandArgs");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleArg
entryRuleArg returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArgRule()); }
	iv_ruleArg=ruleArg
	{ $current=$iv_ruleArg.current; }
	EOF;

// Rule Arg
ruleArg returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_cmd_0_0='ARG'
				{
					newLeafNode(lv_cmd_0_0, grammarAccess.getArgAccess().getCmdARGKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getArgRule());
					}
					setWithLastConsumed($current, "cmd", lv_cmd_0_0, "ARG");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getArgAccess().getArgsArgArgsParserRuleCall_1_0());
				}
				lv_args_1_0=ruleArgArgs
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArgRule());
					}
					set(
						$current,
						"args",
						lv_args_1_0,
						"org.xtext.example.mydocker.MyDocker.ArgArgs");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCmd
entryRuleCmd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCmdRule()); }
	iv_ruleCmd=ruleCmd
	{ $current=$iv_ruleCmd.current; }
	EOF;

// Rule Cmd
ruleCmd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_cmd_0_0='CMD'
				{
					newLeafNode(lv_cmd_0_0, grammarAccess.getCmdAccess().getCmdCMDKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCmdRule());
					}
					setWithLastConsumed($current, "cmd", lv_cmd_0_0, "CMD");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCmdAccess().getArgsCommandArgsParserRuleCall_1_0());
				}
				lv_args_1_0=ruleCommandArgs
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCmdRule());
					}
					set(
						$current,
						"args",
						lv_args_1_0,
						"org.xtext.example.mydocker.MyDocker.CommandArgs");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCopy
entryRuleCopy returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCopyRule()); }
	iv_ruleCopy=ruleCopy
	{ $current=$iv_ruleCopy.current; }
	EOF;

// Rule Copy
ruleCopy returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_cmd_0_0='COPY'
				{
					newLeafNode(lv_cmd_0_0, grammarAccess.getCopyAccess().getCmdCOPYKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCopyRule());
					}
					setWithLastConsumed($current, "cmd", lv_cmd_0_0, "COPY");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCopyAccess().getArgsCommandArgsParserRuleCall_1_0());
				}
				lv_args_1_0=ruleCommandArgs
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCopyRule());
					}
					set(
						$current,
						"args",
						lv_args_1_0,
						"org.xtext.example.mydocker.MyDocker.CommandArgs");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleEntrypoint
entryRuleEntrypoint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEntrypointRule()); }
	iv_ruleEntrypoint=ruleEntrypoint
	{ $current=$iv_ruleEntrypoint.current; }
	EOF;

// Rule Entrypoint
ruleEntrypoint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_cmd_0_0='ENTRYPOINT'
				{
					newLeafNode(lv_cmd_0_0, grammarAccess.getEntrypointAccess().getCmdENTRYPOINTKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEntrypointRule());
					}
					setWithLastConsumed($current, "cmd", lv_cmd_0_0, "ENTRYPOINT");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getEntrypointAccess().getArgsJSONArgsParserRuleCall_1_0());
				}
				lv_args_1_0=ruleJSONArgs
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEntrypointRule());
					}
					set(
						$current,
						"args",
						lv_args_1_0,
						"org.xtext.example.mydocker.MyDocker.JSONArgs");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleEnv
entryRuleEnv returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnvRule()); }
	iv_ruleEnv=ruleEnv
	{ $current=$iv_ruleEnv.current; }
	EOF;

// Rule Env
ruleEnv returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_cmd_0_0='ENV'
				{
					newLeafNode(lv_cmd_0_0, grammarAccess.getEnvAccess().getCmdENVKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEnvRule());
					}
					setWithLastConsumed($current, "cmd", lv_cmd_0_0, "ENV");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getEnvAccess().getArgsNameValsParserRuleCall_1_0());
				}
				lv_args_1_0=ruleNameVals
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEnvRule());
					}
					set(
						$current,
						"args",
						lv_args_1_0,
						"org.xtext.example.mydocker.MyDocker.NameVals");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExpose
entryRuleExpose returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExposeRule()); }
	iv_ruleExpose=ruleExpose
	{ $current=$iv_ruleExpose.current; }
	EOF;

// Rule Expose
ruleExpose returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_cmd_0_0='EXPOSE'
				{
					newLeafNode(lv_cmd_0_0, grammarAccess.getExposeAccess().getCmdEXPOSEKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExposeRule());
					}
					setWithLastConsumed($current, "cmd", lv_cmd_0_0, "EXPOSE");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getExposeAccess().getArgsExposeArgsParserRuleCall_1_0());
				}
				lv_args_1_0=ruleExposeArgs
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExposeRule());
					}
					set(
						$current,
						"args",
						lv_args_1_0,
						"org.xtext.example.mydocker.MyDocker.ExposeArgs");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleFrom
entryRuleFrom returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFromRule()); }
	iv_ruleFrom=ruleFrom
	{ $current=$iv_ruleFrom.current; }
	EOF;

// Rule From
ruleFrom returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_cmd_0_0='FROM'
				{
					newLeafNode(lv_cmd_0_0, grammarAccess.getFromAccess().getCmdFROMKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFromRule());
					}
					setWithLastConsumed($current, "cmd", lv_cmd_0_0, "FROM");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFromAccess().getArgsCommandArgsParserRuleCall_1_0());
				}
				lv_args_1_0=ruleCommandArgs
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFromRule());
					}
					set(
						$current,
						"args",
						lv_args_1_0,
						"org.xtext.example.mydocker.MyDocker.CommandArgs");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleHealthcheck
entryRuleHealthcheck returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHealthcheckRule()); }
	iv_ruleHealthcheck=ruleHealthcheck
	{ $current=$iv_ruleHealthcheck.current; }
	EOF;

// Rule Healthcheck
ruleHealthcheck returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_cmd_0_0='HEALTHCHECK'
				{
					newLeafNode(lv_cmd_0_0, grammarAccess.getHealthcheckAccess().getCmdHEALTHCHECKKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getHealthcheckRule());
					}
					setWithLastConsumed($current, "cmd", lv_cmd_0_0, "HEALTHCHECK");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getHealthcheckAccess().getArgsHealthArgsParserRuleCall_1_0());
				}
				lv_args_1_0=ruleHealthArgs
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getHealthcheckRule());
					}
					set(
						$current,
						"args",
						lv_args_1_0,
						"org.xtext.example.mydocker.MyDocker.HealthArgs");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleLabel
entryRuleLabel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLabelRule()); }
	iv_ruleLabel=ruleLabel
	{ $current=$iv_ruleLabel.current; }
	EOF;

// Rule Label
ruleLabel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_cmd_0_0='LABEL'
				{
					newLeafNode(lv_cmd_0_0, grammarAccess.getLabelAccess().getCmdLABELKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLabelRule());
					}
					setWithLastConsumed($current, "cmd", lv_cmd_0_0, "LABEL");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getLabelAccess().getArgsNameValsParserRuleCall_1_0());
				}
				lv_args_1_0=ruleNameVals
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLabelRule());
					}
					set(
						$current,
						"args",
						lv_args_1_0,
						"org.xtext.example.mydocker.MyDocker.NameVals");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleMaintainer
entryRuleMaintainer returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMaintainerRule()); }
	iv_ruleMaintainer=ruleMaintainer
	{ $current=$iv_ruleMaintainer.current; }
	EOF;

// Rule Maintainer
ruleMaintainer returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_cmd_0_0='MAINTAINER'
				{
					newLeafNode(lv_cmd_0_0, grammarAccess.getMaintainerAccess().getCmdMAINTAINERKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMaintainerRule());
					}
					setWithLastConsumed($current, "cmd", lv_cmd_0_0, "MAINTAINER");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getMaintainerAccess().getArgsValueParserRuleCall_1_0());
				}
				lv_args_1_0=ruleValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMaintainerRule());
					}
					set(
						$current,
						"args",
						lv_args_1_0,
						"org.xtext.example.mydocker.MyDocker.Value");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleOnbuild
entryRuleOnbuild returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOnbuildRule()); }
	iv_ruleOnbuild=ruleOnbuild
	{ $current=$iv_ruleOnbuild.current; }
	EOF;

// Rule Onbuild
ruleOnbuild returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_cmd_0_0='ONBUILD'
				{
					newLeafNode(lv_cmd_0_0, grammarAccess.getOnbuildAccess().getCmdONBUILDKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOnbuildRule());
					}
					setWithLastConsumed($current, "cmd", lv_cmd_0_0, "ONBUILD");
				}
			)
		)
		(
			(
				lv_args_1_0=RULE_ID
				{
					newLeafNode(lv_args_1_0, grammarAccess.getOnbuildAccess().getArgsIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOnbuildRule());
					}
					setWithLastConsumed(
						$current,
						"args",
						lv_args_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleRun
entryRuleRun returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRunRule()); }
	iv_ruleRun=ruleRun
	{ $current=$iv_ruleRun.current; }
	EOF;

// Rule Run
ruleRun returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_cmd_0_0='RUN'
				{
					newLeafNode(lv_cmd_0_0, grammarAccess.getRunAccess().getCmdRUNKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRunRule());
					}
					setWithLastConsumed($current, "cmd", lv_cmd_0_0, "RUN");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRunAccess().getArgsCommandArgsParserRuleCall_1_0());
				}
				lv_args_1_0=ruleCommandArgs
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRunRule());
					}
					set(
						$current,
						"args",
						lv_args_1_0,
						"org.xtext.example.mydocker.MyDocker.CommandArgs");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleShell
entryRuleShell returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getShellRule()); }
	iv_ruleShell=ruleShell
	{ $current=$iv_ruleShell.current; }
	EOF;

// Rule Shell
ruleShell returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_cmd_0_0='SHELL'
				{
					newLeafNode(lv_cmd_0_0, grammarAccess.getShellAccess().getCmdSHELLKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getShellRule());
					}
					setWithLastConsumed($current, "cmd", lv_cmd_0_0, "SHELL");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getShellAccess().getArgsJSONArgsParserRuleCall_1_0());
				}
				lv_args_1_0=ruleJSONArgs
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getShellRule());
					}
					set(
						$current,
						"args",
						lv_args_1_0,
						"org.xtext.example.mydocker.MyDocker.JSONArgs");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleStopSignal
entryRuleStopSignal returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStopSignalRule()); }
	iv_ruleStopSignal=ruleStopSignal
	{ $current=$iv_ruleStopSignal.current; }
	EOF;

// Rule StopSignal
ruleStopSignal returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_cmd_0_0='STOPSIGNAL'
				{
					newLeafNode(lv_cmd_0_0, grammarAccess.getStopSignalAccess().getCmdSTOPSIGNALKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStopSignalRule());
					}
					setWithLastConsumed($current, "cmd", lv_cmd_0_0, "STOPSIGNAL");
				}
			)
		)
		(
			(
				lv_args_1_0=RULE_STRING
				{
					newLeafNode(lv_args_1_0, grammarAccess.getStopSignalAccess().getArgsSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStopSignalRule());
					}
					setWithLastConsumed(
						$current,
						"args",
						lv_args_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleUser
entryRuleUser returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUserRule()); }
	iv_ruleUser=ruleUser
	{ $current=$iv_ruleUser.current; }
	EOF;

// Rule User
ruleUser returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_cmd_0_0='USER'
				{
					newLeafNode(lv_cmd_0_0, grammarAccess.getUserAccess().getCmdUSERKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUserRule());
					}
					setWithLastConsumed($current, "cmd", lv_cmd_0_0, "USER");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getUserAccess().getArgsValueParserRuleCall_1_0());
				}
				lv_args_1_0=ruleValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUserRule());
					}
					set(
						$current,
						"args",
						lv_args_1_0,
						"org.xtext.example.mydocker.MyDocker.Value");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleVolume
entryRuleVolume returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVolumeRule()); }
	iv_ruleVolume=ruleVolume
	{ $current=$iv_ruleVolume.current; }
	EOF;

// Rule Volume
ruleVolume returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_cmd_0_0='VOLUME'
				{
					newLeafNode(lv_cmd_0_0, grammarAccess.getVolumeAccess().getCmdVOLUMEKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVolumeRule());
					}
					setWithLastConsumed($current, "cmd", lv_cmd_0_0, "VOLUME");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getVolumeAccess().getArgsCommandArgsParserRuleCall_1_0());
				}
				lv_args_1_0=ruleCommandArgs
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVolumeRule());
					}
					set(
						$current,
						"args",
						lv_args_1_0,
						"org.xtext.example.mydocker.MyDocker.CommandArgs");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleWorkdir
entryRuleWorkdir returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWorkdirRule()); }
	iv_ruleWorkdir=ruleWorkdir
	{ $current=$iv_ruleWorkdir.current; }
	EOF;

// Rule Workdir
ruleWorkdir returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_cmd_0_0='WORKDIR'
				{
					newLeafNode(lv_cmd_0_0, grammarAccess.getWorkdirAccess().getCmdWORKDIRKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getWorkdirRule());
					}
					setWithLastConsumed($current, "cmd", lv_cmd_0_0, "WORKDIR");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getWorkdirAccess().getArgsValueParserRuleCall_1_0());
				}
				lv_args_1_0=ruleValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWorkdirRule());
					}
					set(
						$current,
						"args",
						lv_args_1_0,
						"org.xtext.example.mydocker.MyDocker.Value");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCommandArgs
entryRuleCommandArgs returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCommandArgsRule()); }
	iv_ruleCommandArgs=ruleCommandArgs
	{ $current=$iv_ruleCommandArgs.current; }
	EOF;

// Rule CommandArgs
ruleCommandArgs returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCommandArgsAccess().getJSONArgsParserRuleCall_0());
		}
		this_JSONArgs_0=ruleJSONArgs
		{
			$current = $this_JSONArgs_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandArgsAccess().getSpaceArgsParserRuleCall_1());
		}
		ruleSpaceArgs
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleJSONArgs
entryRuleJSONArgs returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJSONArgsRule()); }
	iv_ruleJSONArgs=ruleJSONArgs
	{ $current=$iv_ruleJSONArgs.current; }
	EOF;

// Rule JSONArgs
ruleJSONArgs returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='['
			{
				newLeafNode(otherlv_0, grammarAccess.getJSONArgsAccess().getLeftSquareBracketKeyword_0_0());
			}
			(
				(
					lv_args_1_0=RULE_STRING
					{
						newLeafNode(lv_args_1_0, grammarAccess.getJSONArgsAccess().getArgsSTRINGTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getJSONArgsRule());
						}
						addWithLastConsumed(
							$current,
							"args",
							lv_args_1_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
			(
				otherlv_2=','
				{
					newLeafNode(otherlv_2, grammarAccess.getJSONArgsAccess().getCommaKeyword_0_2_0());
				}
				(
					(
						lv_args_3_0=RULE_STRING
						{
							newLeafNode(lv_args_3_0, grammarAccess.getJSONArgsAccess().getArgsSTRINGTerminalRuleCall_0_2_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getJSONArgsRule());
							}
							addWithLastConsumed(
								$current,
								"args",
								lv_args_3_0,
								"org.eclipse.xtext.common.Terminals.STRING");
						}
					)
				)
			)*
			otherlv_4=']'
			{
				newLeafNode(otherlv_4, grammarAccess.getJSONArgsAccess().getRightSquareBracketKeyword_0_3());
			}
		)
		    |
		(
			otherlv_5='['
			{
				newLeafNode(otherlv_5, grammarAccess.getJSONArgsAccess().getLeftSquareBracketKeyword_1_0());
			}
			otherlv_6=']'
			{
				newLeafNode(otherlv_6, grammarAccess.getJSONArgsAccess().getRightSquareBracketKeyword_1_1());
			}
		)
	)
;

// Entry rule entryRuleSpaceArgs
entryRuleSpaceArgs returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSpaceArgsRule()); }
	iv_ruleSpaceArgs=ruleSpaceArgs
	{ $current=$iv_ruleSpaceArgs.current.getText(); }
	EOF;

// Rule SpaceArgs
ruleSpaceArgs returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSpaceArgsAccess().getValueParserRuleCall_0());
		}
		this_Value_0=ruleValue
		{
			$current.merge(this_Value_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			{
				newCompositeNode(grammarAccess.getSpaceArgsAccess().getValueParserRuleCall_1());
			}
			this_Value_1=ruleValue
			{
				$current.merge(this_Value_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRuleNameVals
entryRuleNameVals returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNameValsRule()); }
	iv_ruleNameVals=ruleNameVals
	{ $current=$iv_ruleNameVals.current; }
	EOF;

// Rule NameVals
ruleNameVals returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getNameValsAccess().getValuesNameValParserRuleCall_0());
			}
			lv_values_0_0=ruleNameVal
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getNameValsRule());
				}
				add(
					$current,
					"values",
					lv_values_0_0,
					"org.xtext.example.mydocker.MyDocker.NameVal");
				afterParserOrEnumRuleCall();
			}
		)
	)+
;

// Entry rule entryRuleNameVal
entryRuleNameVal returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNameValRule()); }
	iv_ruleNameVal=ruleNameVal
	{ $current=$iv_ruleNameVal.current; }
	EOF;

// Rule NameVal
ruleNameVal returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_key_0_0=RULE_ID
					{
						newLeafNode(lv_key_0_0, grammarAccess.getNameValAccess().getKeyIDTerminalRuleCall_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNameValRule());
						}
						setWithLastConsumed(
							$current,
							"key",
							lv_key_0_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getNameValAccess().getValueValueParserRuleCall_0_1_0());
					}
					lv_value_1_0=ruleValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNameValRule());
						}
						set(
							$current,
							"value",
							lv_value_1_0,
							"org.xtext.example.mydocker.MyDocker.Value");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				(
					lv_key_2_0=RULE_ID
					{
						newLeafNode(lv_key_2_0, grammarAccess.getNameValAccess().getKeyIDTerminalRuleCall_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNameValRule());
						}
						setWithLastConsumed(
							$current,
							"key",
							lv_key_2_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			otherlv_3='='
			{
				newLeafNode(otherlv_3, grammarAccess.getNameValAccess().getEqualsSignKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getNameValAccess().getValueValueParserRuleCall_1_2_0());
					}
					lv_value_4_0=ruleValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNameValRule());
						}
						set(
							$current,
							"value",
							lv_value_4_0,
							"org.xtext.example.mydocker.MyDocker.Value");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleArgArgs
entryRuleArgArgs returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArgArgsRule()); }
	iv_ruleArgArgs=ruleArgArgs
	{ $current=$iv_ruleArgArgs.current; }
	EOF;

// Rule ArgArgs
ruleArgArgs returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getArgArgsAccess().getArgArgsAction_0_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getArgArgsAccess().getValueValueParserRuleCall_0_1_0());
					}
					lv_value_1_0=ruleValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getArgArgsRule());
						}
						set(
							$current,
							"value",
							lv_value_1_0,
							"org.xtext.example.mydocker.MyDocker.Value");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getArgArgsAccess().getValuesNameValsParserRuleCall_1_0());
				}
				lv_values_2_0=ruleNameVals
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArgArgsRule());
					}
					set(
						$current,
						"values",
						lv_values_2_0,
						"org.xtext.example.mydocker.MyDocker.NameVals");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleHealthArgs
entryRuleHealthArgs returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHealthArgsRule()); }
	iv_ruleHealthArgs=ruleHealthArgs
	{ $current=$iv_ruleHealthArgs.current; }
	EOF;

// Rule HealthArgs
ruleHealthArgs returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_typ_0_0='None'
				{
					newLeafNode(lv_typ_0_0, grammarAccess.getHealthArgsAccess().getTypNoneKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getHealthArgsRule());
					}
					setWithLastConsumed($current, "typ", lv_typ_0_0, "None");
				}
			)
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getHealthArgsAccess().getOptionsOptionsParserRuleCall_1_0_0());
					}
					lv_options_1_0=ruleOptions
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getHealthArgsRule());
						}
						set(
							$current,
							"options",
							lv_options_1_0,
							"org.xtext.example.mydocker.MyDocker.Options");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_2='CMD'
			{
				newLeafNode(otherlv_2, grammarAccess.getHealthArgsAccess().getCMDKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getHealthArgsAccess().getCmdArgsCommandArgsParserRuleCall_1_2_0());
					}
					lv_cmdArgs_3_0=ruleCommandArgs
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getHealthArgsRule());
						}
						set(
							$current,
							"cmdArgs",
							lv_cmdArgs_3_0,
							"org.xtext.example.mydocker.MyDocker.CommandArgs");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleOptions
entryRuleOptions returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOptionsRule()); }
	iv_ruleOptions=ruleOptions
	{ $current=$iv_ruleOptions.current; }
	EOF;

// Rule Options
ruleOptions returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getOptionsAccess().getOptionsAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getOptionsAccess().getOptionsOptionParserRuleCall_1_0());
				}
				lv_options_1_0=ruleOption
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOptionsRule());
					}
					add(
						$current,
						"options",
						lv_options_1_0,
						"org.xtext.example.mydocker.MyDocker.Option");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleOption
entryRuleOption returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOptionRule()); }
	iv_ruleOption=ruleOption
	{ $current=$iv_ruleOption.current; }
	EOF;

// Rule Option
ruleOption returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='--'
		{
			newLeafNode(otherlv_0, grammarAccess.getOptionAccess().getHyphenMinusHyphenMinusKeyword_0());
		}
		(
			(
				lv_option_1_0=RULE_ID
				{
					newLeafNode(lv_option_1_0, grammarAccess.getOptionAccess().getOptionIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOptionRule());
					}
					setWithLastConsumed(
						$current,
						"option",
						lv_option_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='='
		{
			newLeafNode(otherlv_2, grammarAccess.getOptionAccess().getEqualsSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOptionAccess().getValueValueParserRuleCall_3_0());
				}
				lv_value_3_0=ruleValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOptionRule());
					}
					set(
						$current,
						"value",
						lv_value_3_0,
						"org.xtext.example.mydocker.MyDocker.Value");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleValue
entryRuleValue returns [String current=null]:
	{ newCompositeNode(grammarAccess.getValueRule()); }
	iv_ruleValue=ruleValue
	{ $current=$iv_ruleValue.current.getText(); }
	EOF;

// Rule Value
ruleValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getValueAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getValueAccess().getIDTerminalRuleCall_1());
		}
		    |
		this_RAW_VALUE_2=RULE_RAW_VALUE
		{
			$current.merge(this_RAW_VALUE_2);
		}
		{
			newLeafNode(this_RAW_VALUE_2, grammarAccess.getValueAccess().getRAW_VALUETerminalRuleCall_2());
		}
	)
;

// Entry rule entryRuleExposeArgs
entryRuleExposeArgs returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExposeArgsRule()); }
	iv_ruleExposeArgs=ruleExposeArgs
	{ $current=$iv_ruleExposeArgs.current; }
	EOF;

// Rule ExposeArgs
ruleExposeArgs returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getExposeArgsAccess().getPortsExposeArgParserRuleCall_0());
			}
			lv_ports_0_0=ruleExposeArg
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getExposeArgsRule());
				}
				add(
					$current,
					"ports",
					lv_ports_0_0,
					"org.xtext.example.mydocker.MyDocker.ExposeArg");
				afterParserOrEnumRuleCall();
			}
		)
	)+
;

// Entry rule entryRuleExposeArg
entryRuleExposeArg returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExposeArgRule()); }
	iv_ruleExposeArg=ruleExposeArg
	{ $current=$iv_ruleExposeArg.current; }
	EOF;

// Rule ExposeArg
ruleExposeArg returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_port_0_0=RULE_INT
				{
					newLeafNode(lv_port_0_0, grammarAccess.getExposeArgAccess().getPortINTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExposeArgRule());
					}
					setWithLastConsumed(
						$current,
						"port",
						lv_port_0_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		    |
		(
			(
				lv_port_protocol_1_0=RULE_EXPOSE_PORT_PROTOCOL
				{
					newLeafNode(lv_port_protocol_1_0, grammarAccess.getExposeArgAccess().getPort_protocolEXPOSE_PORT_PROTOCOLTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExposeArgRule());
					}
					setWithLastConsumed(
						$current,
						"port_protocol",
						lv_port_protocol_1_0,
						"org.xtext.example.mydocker.MyDocker.EXPOSE_PORT_PROTOCOL");
				}
			)
		)
	)
;

RULE_EXPOSE_PORT_PROTOCOL : ('0'..'9')+ '/' ('a'..'z'|'_'|'-')+;

RULE_RAW_VALUE : ('a'..'z'|'A'..'Z'|'_'|'-'|'/'|'.'|'\\') ('a'..'z'|'A'..'Z'|'_'|'-'|'0'..'9'|'/'|'.'|'\\'|':')*;

RULE_SH_COMMENT : '#' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
