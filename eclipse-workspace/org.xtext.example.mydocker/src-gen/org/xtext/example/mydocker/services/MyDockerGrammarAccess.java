/*
 * generated by Xtext 2.30.0
 */
package org.xtext.example.mydocker.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDockerGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class DockerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydocker.MyDocker.Docker");
		private final Assignment cCommandsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cCommandsCommandParserRuleCall_0 = (RuleCall)cCommandsAssignment.eContents().get(0);
		
		//Docker hidden(WS, ML_COMMENT, SH_COMMENT):
		//    (commands+=Command)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(commands+=Command)*
		public Assignment getCommandsAssignment() { return cCommandsAssignment; }
		
		//Command
		public RuleCall getCommandsCommandParserRuleCall_0() { return cCommandsCommandParserRuleCall_0; }
	}
	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydocker.MyDocker.Command");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAddParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cArgParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCmdParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCopyParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cEntrypointParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cEnvParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cExposeParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cFromParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cHealthcheckParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cLabelParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cMaintainerParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cOnbuildParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cRunParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cShellParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cStopSignalParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cUserParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cVolumeParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cWorkdirParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		
		//Command:
		//    Add | Arg | Cmd | Copy | Entrypoint | Env |
		//    Expose | From | Healthcheck | Label |
		//    Maintainer | Onbuild | Run | Shell |
		//    StopSignal | User | Volume | Workdir
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Add | Arg | Cmd | Copy | Entrypoint | Env |
		//Expose | From | Healthcheck | Label |
		//Maintainer | Onbuild | Run | Shell |
		//StopSignal | User | Volume | Workdir
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Add
		public RuleCall getAddParserRuleCall_0() { return cAddParserRuleCall_0; }
		
		//Arg
		public RuleCall getArgParserRuleCall_1() { return cArgParserRuleCall_1; }
		
		//Cmd
		public RuleCall getCmdParserRuleCall_2() { return cCmdParserRuleCall_2; }
		
		//Copy
		public RuleCall getCopyParserRuleCall_3() { return cCopyParserRuleCall_3; }
		
		//Entrypoint
		public RuleCall getEntrypointParserRuleCall_4() { return cEntrypointParserRuleCall_4; }
		
		//Env
		public RuleCall getEnvParserRuleCall_5() { return cEnvParserRuleCall_5; }
		
		//Expose
		public RuleCall getExposeParserRuleCall_6() { return cExposeParserRuleCall_6; }
		
		//From
		public RuleCall getFromParserRuleCall_7() { return cFromParserRuleCall_7; }
		
		//Healthcheck
		public RuleCall getHealthcheckParserRuleCall_8() { return cHealthcheckParserRuleCall_8; }
		
		//Label
		public RuleCall getLabelParserRuleCall_9() { return cLabelParserRuleCall_9; }
		
		//Maintainer
		public RuleCall getMaintainerParserRuleCall_10() { return cMaintainerParserRuleCall_10; }
		
		//Onbuild
		public RuleCall getOnbuildParserRuleCall_11() { return cOnbuildParserRuleCall_11; }
		
		//Run
		public RuleCall getRunParserRuleCall_12() { return cRunParserRuleCall_12; }
		
		//Shell
		public RuleCall getShellParserRuleCall_13() { return cShellParserRuleCall_13; }
		
		//StopSignal
		public RuleCall getStopSignalParserRuleCall_14() { return cStopSignalParserRuleCall_14; }
		
		//User
		public RuleCall getUserParserRuleCall_15() { return cUserParserRuleCall_15; }
		
		//Volume
		public RuleCall getVolumeParserRuleCall_16() { return cVolumeParserRuleCall_16; }
		
		//Workdir
		public RuleCall getWorkdirParserRuleCall_17() { return cWorkdirParserRuleCall_17; }
	}
	public class AddElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydocker.MyDocker.Add");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCmdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cCmdADDKeyword_0_0 = (Keyword)cCmdAssignment_0.eContents().get(0);
		private final Assignment cArgsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgsCommandArgsParserRuleCall_1_0 = (RuleCall)cArgsAssignment_1.eContents().get(0);
		
		//Add:
		//    cmd='ADD' args=CommandArgs
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//cmd='ADD' args=CommandArgs
		public Group getGroup() { return cGroup; }
		
		//cmd='ADD'
		public Assignment getCmdAssignment_0() { return cCmdAssignment_0; }
		
		//'ADD'
		public Keyword getCmdADDKeyword_0_0() { return cCmdADDKeyword_0_0; }
		
		//args=CommandArgs
		public Assignment getArgsAssignment_1() { return cArgsAssignment_1; }
		
		//CommandArgs
		public RuleCall getArgsCommandArgsParserRuleCall_1_0() { return cArgsCommandArgsParserRuleCall_1_0; }
	}
	public class ArgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydocker.MyDocker.Arg");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCmdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cCmdARGKeyword_0_0 = (Keyword)cCmdAssignment_0.eContents().get(0);
		private final Assignment cArgsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgsArgArgsParserRuleCall_1_0 = (RuleCall)cArgsAssignment_1.eContents().get(0);
		
		//Arg:
		//    cmd='ARG' args=ArgArgs
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//cmd='ARG' args=ArgArgs
		public Group getGroup() { return cGroup; }
		
		//cmd='ARG'
		public Assignment getCmdAssignment_0() { return cCmdAssignment_0; }
		
		//'ARG'
		public Keyword getCmdARGKeyword_0_0() { return cCmdARGKeyword_0_0; }
		
		//args=ArgArgs
		public Assignment getArgsAssignment_1() { return cArgsAssignment_1; }
		
		//ArgArgs
		public RuleCall getArgsArgArgsParserRuleCall_1_0() { return cArgsArgArgsParserRuleCall_1_0; }
	}
	public class CmdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydocker.MyDocker.Cmd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCmdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cCmdCMDKeyword_0_0 = (Keyword)cCmdAssignment_0.eContents().get(0);
		private final Assignment cArgsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgsCommandArgsParserRuleCall_1_0 = (RuleCall)cArgsAssignment_1.eContents().get(0);
		
		//Cmd:
		//    cmd='CMD' args=CommandArgs
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//cmd='CMD' args=CommandArgs
		public Group getGroup() { return cGroup; }
		
		//cmd='CMD'
		public Assignment getCmdAssignment_0() { return cCmdAssignment_0; }
		
		//'CMD'
		public Keyword getCmdCMDKeyword_0_0() { return cCmdCMDKeyword_0_0; }
		
		//args=CommandArgs
		public Assignment getArgsAssignment_1() { return cArgsAssignment_1; }
		
		//CommandArgs
		public RuleCall getArgsCommandArgsParserRuleCall_1_0() { return cArgsCommandArgsParserRuleCall_1_0; }
	}
	public class CopyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydocker.MyDocker.Copy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCmdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cCmdCOPYKeyword_0_0 = (Keyword)cCmdAssignment_0.eContents().get(0);
		private final Assignment cArgsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgsCommandArgsParserRuleCall_1_0 = (RuleCall)cArgsAssignment_1.eContents().get(0);
		
		//Copy:
		//    cmd='COPY' args=CommandArgs
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//cmd='COPY' args=CommandArgs
		public Group getGroup() { return cGroup; }
		
		//cmd='COPY'
		public Assignment getCmdAssignment_0() { return cCmdAssignment_0; }
		
		//'COPY'
		public Keyword getCmdCOPYKeyword_0_0() { return cCmdCOPYKeyword_0_0; }
		
		//args=CommandArgs
		public Assignment getArgsAssignment_1() { return cArgsAssignment_1; }
		
		//CommandArgs
		public RuleCall getArgsCommandArgsParserRuleCall_1_0() { return cArgsCommandArgsParserRuleCall_1_0; }
	}
	public class EntrypointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydocker.MyDocker.Entrypoint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCmdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cCmdENTRYPOINTKeyword_0_0 = (Keyword)cCmdAssignment_0.eContents().get(0);
		private final Assignment cArgsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgsJSONArgsParserRuleCall_1_0 = (RuleCall)cArgsAssignment_1.eContents().get(0);
		
		//Entrypoint:
		//    cmd='ENTRYPOINT' args=JSONArgs
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//cmd='ENTRYPOINT' args=JSONArgs
		public Group getGroup() { return cGroup; }
		
		//cmd='ENTRYPOINT'
		public Assignment getCmdAssignment_0() { return cCmdAssignment_0; }
		
		//'ENTRYPOINT'
		public Keyword getCmdENTRYPOINTKeyword_0_0() { return cCmdENTRYPOINTKeyword_0_0; }
		
		//args=JSONArgs
		public Assignment getArgsAssignment_1() { return cArgsAssignment_1; }
		
		//JSONArgs
		public RuleCall getArgsJSONArgsParserRuleCall_1_0() { return cArgsJSONArgsParserRuleCall_1_0; }
	}
	public class EnvElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydocker.MyDocker.Env");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCmdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cCmdENVKeyword_0_0 = (Keyword)cCmdAssignment_0.eContents().get(0);
		private final Assignment cArgsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgsNameValsParserRuleCall_1_0 = (RuleCall)cArgsAssignment_1.eContents().get(0);
		
		//Env:
		//    cmd='ENV' args=NameVals
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//cmd='ENV' args=NameVals
		public Group getGroup() { return cGroup; }
		
		//cmd='ENV'
		public Assignment getCmdAssignment_0() { return cCmdAssignment_0; }
		
		//'ENV'
		public Keyword getCmdENVKeyword_0_0() { return cCmdENVKeyword_0_0; }
		
		//args=NameVals
		public Assignment getArgsAssignment_1() { return cArgsAssignment_1; }
		
		//NameVals
		public RuleCall getArgsNameValsParserRuleCall_1_0() { return cArgsNameValsParserRuleCall_1_0; }
	}
	public class ExposeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydocker.MyDocker.Expose");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCmdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cCmdEXPOSEKeyword_0_0 = (Keyword)cCmdAssignment_0.eContents().get(0);
		private final Assignment cArgsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgsExposeArgsParserRuleCall_1_0 = (RuleCall)cArgsAssignment_1.eContents().get(0);
		
		//Expose:
		//    cmd='EXPOSE' args=ExposeArgs
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//cmd='EXPOSE' args=ExposeArgs
		public Group getGroup() { return cGroup; }
		
		//cmd='EXPOSE'
		public Assignment getCmdAssignment_0() { return cCmdAssignment_0; }
		
		//'EXPOSE'
		public Keyword getCmdEXPOSEKeyword_0_0() { return cCmdEXPOSEKeyword_0_0; }
		
		//args=ExposeArgs
		public Assignment getArgsAssignment_1() { return cArgsAssignment_1; }
		
		//ExposeArgs
		public RuleCall getArgsExposeArgsParserRuleCall_1_0() { return cArgsExposeArgsParserRuleCall_1_0; }
	}
	public class FromElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydocker.MyDocker.From");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCmdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cCmdFROMKeyword_0_0 = (Keyword)cCmdAssignment_0.eContents().get(0);
		private final Assignment cArgsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgsCommandArgsParserRuleCall_1_0 = (RuleCall)cArgsAssignment_1.eContents().get(0);
		
		//From:
		//    cmd='FROM' args=CommandArgs
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//cmd='FROM' args=CommandArgs
		public Group getGroup() { return cGroup; }
		
		//cmd='FROM'
		public Assignment getCmdAssignment_0() { return cCmdAssignment_0; }
		
		//'FROM'
		public Keyword getCmdFROMKeyword_0_0() { return cCmdFROMKeyword_0_0; }
		
		//args=CommandArgs
		public Assignment getArgsAssignment_1() { return cArgsAssignment_1; }
		
		//CommandArgs
		public RuleCall getArgsCommandArgsParserRuleCall_1_0() { return cArgsCommandArgsParserRuleCall_1_0; }
	}
	public class HealthcheckElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydocker.MyDocker.Healthcheck");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCmdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cCmdHEALTHCHECKKeyword_0_0 = (Keyword)cCmdAssignment_0.eContents().get(0);
		private final Assignment cArgsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgsHealthArgsParserRuleCall_1_0 = (RuleCall)cArgsAssignment_1.eContents().get(0);
		
		//Healthcheck:
		//    cmd='HEALTHCHECK' args=HealthArgs
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//cmd='HEALTHCHECK' args=HealthArgs
		public Group getGroup() { return cGroup; }
		
		//cmd='HEALTHCHECK'
		public Assignment getCmdAssignment_0() { return cCmdAssignment_0; }
		
		//'HEALTHCHECK'
		public Keyword getCmdHEALTHCHECKKeyword_0_0() { return cCmdHEALTHCHECKKeyword_0_0; }
		
		//args=HealthArgs
		public Assignment getArgsAssignment_1() { return cArgsAssignment_1; }
		
		//HealthArgs
		public RuleCall getArgsHealthArgsParserRuleCall_1_0() { return cArgsHealthArgsParserRuleCall_1_0; }
	}
	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydocker.MyDocker.Label");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCmdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cCmdLABELKeyword_0_0 = (Keyword)cCmdAssignment_0.eContents().get(0);
		private final Assignment cArgsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgsNameValsParserRuleCall_1_0 = (RuleCall)cArgsAssignment_1.eContents().get(0);
		
		//Label:
		//    cmd='LABEL' args=NameVals
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//cmd='LABEL' args=NameVals
		public Group getGroup() { return cGroup; }
		
		//cmd='LABEL'
		public Assignment getCmdAssignment_0() { return cCmdAssignment_0; }
		
		//'LABEL'
		public Keyword getCmdLABELKeyword_0_0() { return cCmdLABELKeyword_0_0; }
		
		//args=NameVals
		public Assignment getArgsAssignment_1() { return cArgsAssignment_1; }
		
		//NameVals
		public RuleCall getArgsNameValsParserRuleCall_1_0() { return cArgsNameValsParserRuleCall_1_0; }
	}
	public class MaintainerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydocker.MyDocker.Maintainer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCmdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cCmdMAINTAINERKeyword_0_0 = (Keyword)cCmdAssignment_0.eContents().get(0);
		private final Assignment cArgsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgsValueParserRuleCall_1_0 = (RuleCall)cArgsAssignment_1.eContents().get(0);
		
		//Maintainer:
		//    cmd='MAINTAINER' args=Value
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//cmd='MAINTAINER' args=Value
		public Group getGroup() { return cGroup; }
		
		//cmd='MAINTAINER'
		public Assignment getCmdAssignment_0() { return cCmdAssignment_0; }
		
		//'MAINTAINER'
		public Keyword getCmdMAINTAINERKeyword_0_0() { return cCmdMAINTAINERKeyword_0_0; }
		
		//args=Value
		public Assignment getArgsAssignment_1() { return cArgsAssignment_1; }
		
		//Value
		public RuleCall getArgsValueParserRuleCall_1_0() { return cArgsValueParserRuleCall_1_0; }
	}
	public class OnbuildElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydocker.MyDocker.Onbuild");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCmdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cCmdONBUILDKeyword_0_0 = (Keyword)cCmdAssignment_0.eContents().get(0);
		private final Assignment cArgsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgsIDTerminalRuleCall_1_0 = (RuleCall)cArgsAssignment_1.eContents().get(0);
		
		//Onbuild:
		//    cmd='ONBUILD' args=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//cmd='ONBUILD' args=ID
		public Group getGroup() { return cGroup; }
		
		//cmd='ONBUILD'
		public Assignment getCmdAssignment_0() { return cCmdAssignment_0; }
		
		//'ONBUILD'
		public Keyword getCmdONBUILDKeyword_0_0() { return cCmdONBUILDKeyword_0_0; }
		
		//args=ID
		public Assignment getArgsAssignment_1() { return cArgsAssignment_1; }
		
		//ID
		public RuleCall getArgsIDTerminalRuleCall_1_0() { return cArgsIDTerminalRuleCall_1_0; }
	}
	public class RunElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydocker.MyDocker.Run");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCmdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cCmdRUNKeyword_0_0 = (Keyword)cCmdAssignment_0.eContents().get(0);
		private final Assignment cArgsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgsCommandArgsParserRuleCall_1_0 = (RuleCall)cArgsAssignment_1.eContents().get(0);
		
		//Run:
		//    cmd='RUN' args=CommandArgs
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//cmd='RUN' args=CommandArgs
		public Group getGroup() { return cGroup; }
		
		//cmd='RUN'
		public Assignment getCmdAssignment_0() { return cCmdAssignment_0; }
		
		//'RUN'
		public Keyword getCmdRUNKeyword_0_0() { return cCmdRUNKeyword_0_0; }
		
		//args=CommandArgs
		public Assignment getArgsAssignment_1() { return cArgsAssignment_1; }
		
		//CommandArgs
		public RuleCall getArgsCommandArgsParserRuleCall_1_0() { return cArgsCommandArgsParserRuleCall_1_0; }
	}
	public class ShellElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydocker.MyDocker.Shell");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCmdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cCmdSHELLKeyword_0_0 = (Keyword)cCmdAssignment_0.eContents().get(0);
		private final Assignment cArgsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgsJSONArgsParserRuleCall_1_0 = (RuleCall)cArgsAssignment_1.eContents().get(0);
		
		//Shell:
		//    cmd='SHELL' args=JSONArgs
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//cmd='SHELL' args=JSONArgs
		public Group getGroup() { return cGroup; }
		
		//cmd='SHELL'
		public Assignment getCmdAssignment_0() { return cCmdAssignment_0; }
		
		//'SHELL'
		public Keyword getCmdSHELLKeyword_0_0() { return cCmdSHELLKeyword_0_0; }
		
		//args=JSONArgs
		public Assignment getArgsAssignment_1() { return cArgsAssignment_1; }
		
		//JSONArgs
		public RuleCall getArgsJSONArgsParserRuleCall_1_0() { return cArgsJSONArgsParserRuleCall_1_0; }
	}
	public class StopSignalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydocker.MyDocker.StopSignal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCmdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cCmdSTOPSIGNALKeyword_0_0 = (Keyword)cCmdAssignment_0.eContents().get(0);
		private final Assignment cArgsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgsSTRINGTerminalRuleCall_1_0 = (RuleCall)cArgsAssignment_1.eContents().get(0);
		
		//StopSignal:
		//    cmd='STOPSIGNAL' args=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//cmd='STOPSIGNAL' args=STRING
		public Group getGroup() { return cGroup; }
		
		//cmd='STOPSIGNAL'
		public Assignment getCmdAssignment_0() { return cCmdAssignment_0; }
		
		//'STOPSIGNAL'
		public Keyword getCmdSTOPSIGNALKeyword_0_0() { return cCmdSTOPSIGNALKeyword_0_0; }
		
		//args=STRING
		public Assignment getArgsAssignment_1() { return cArgsAssignment_1; }
		
		//STRING
		public RuleCall getArgsSTRINGTerminalRuleCall_1_0() { return cArgsSTRINGTerminalRuleCall_1_0; }
	}
	public class UserElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydocker.MyDocker.User");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCmdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cCmdUSERKeyword_0_0 = (Keyword)cCmdAssignment_0.eContents().get(0);
		private final Assignment cArgsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgsValueParserRuleCall_1_0 = (RuleCall)cArgsAssignment_1.eContents().get(0);
		
		//User:
		//    cmd='USER' args=Value
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//cmd='USER' args=Value
		public Group getGroup() { return cGroup; }
		
		//cmd='USER'
		public Assignment getCmdAssignment_0() { return cCmdAssignment_0; }
		
		//'USER'
		public Keyword getCmdUSERKeyword_0_0() { return cCmdUSERKeyword_0_0; }
		
		//args=Value
		public Assignment getArgsAssignment_1() { return cArgsAssignment_1; }
		
		//Value
		public RuleCall getArgsValueParserRuleCall_1_0() { return cArgsValueParserRuleCall_1_0; }
	}
	public class VolumeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydocker.MyDocker.Volume");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCmdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cCmdVOLUMEKeyword_0_0 = (Keyword)cCmdAssignment_0.eContents().get(0);
		private final Assignment cArgsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgsCommandArgsParserRuleCall_1_0 = (RuleCall)cArgsAssignment_1.eContents().get(0);
		
		//Volume:
		//    cmd='VOLUME' args=CommandArgs
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//cmd='VOLUME' args=CommandArgs
		public Group getGroup() { return cGroup; }
		
		//cmd='VOLUME'
		public Assignment getCmdAssignment_0() { return cCmdAssignment_0; }
		
		//'VOLUME'
		public Keyword getCmdVOLUMEKeyword_0_0() { return cCmdVOLUMEKeyword_0_0; }
		
		//args=CommandArgs
		public Assignment getArgsAssignment_1() { return cArgsAssignment_1; }
		
		//CommandArgs
		public RuleCall getArgsCommandArgsParserRuleCall_1_0() { return cArgsCommandArgsParserRuleCall_1_0; }
	}
	public class WorkdirElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydocker.MyDocker.Workdir");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCmdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cCmdWORKDIRKeyword_0_0 = (Keyword)cCmdAssignment_0.eContents().get(0);
		private final Assignment cArgsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgsValueParserRuleCall_1_0 = (RuleCall)cArgsAssignment_1.eContents().get(0);
		
		//Workdir:
		//    cmd='WORKDIR' args=Value
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//cmd='WORKDIR' args=Value
		public Group getGroup() { return cGroup; }
		
		//cmd='WORKDIR'
		public Assignment getCmdAssignment_0() { return cCmdAssignment_0; }
		
		//'WORKDIR'
		public Keyword getCmdWORKDIRKeyword_0_0() { return cCmdWORKDIRKeyword_0_0; }
		
		//args=Value
		public Assignment getArgsAssignment_1() { return cArgsAssignment_1; }
		
		//Value
		public RuleCall getArgsValueParserRuleCall_1_0() { return cArgsValueParserRuleCall_1_0; }
	}
	public class CommandArgsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydocker.MyDocker.CommandArgs");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cJSONArgsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSpaceArgsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//CommandArgs:
		//    JSONArgs | SpaceArgs
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//JSONArgs | SpaceArgs
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//JSONArgs
		public RuleCall getJSONArgsParserRuleCall_0() { return cJSONArgsParserRuleCall_0; }
		
		//SpaceArgs
		public RuleCall getSpaceArgsParserRuleCall_1() { return cSpaceArgsParserRuleCall_1; }
	}
	public class JSONArgsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydocker.MyDocker.JSONArgs");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cArgsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cArgsSTRINGTerminalRuleCall_0_1_0 = (RuleCall)cArgsAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cCommaKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cArgsAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cArgsSTRINGTerminalRuleCall_0_2_1_0 = (RuleCall)cArgsAssignment_0_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//JSONArgs:
		//    '[' (args+=STRING) (',' (args+=STRING))* ']'
		//    | '[' ']'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'[' (args+=STRING) (',' (args+=STRING))* ']'
		//| '[' ']'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'[' (args+=STRING) (',' (args+=STRING))* ']'
		public Group getGroup_0() { return cGroup_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_0() { return cLeftSquareBracketKeyword_0_0; }
		
		//(args+=STRING)
		public Assignment getArgsAssignment_0_1() { return cArgsAssignment_0_1; }
		
		//STRING
		public RuleCall getArgsSTRINGTerminalRuleCall_0_1_0() { return cArgsSTRINGTerminalRuleCall_0_1_0; }
		
		//(',' (args+=STRING))*
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//','
		public Keyword getCommaKeyword_0_2_0() { return cCommaKeyword_0_2_0; }
		
		//(args+=STRING)
		public Assignment getArgsAssignment_0_2_1() { return cArgsAssignment_0_2_1; }
		
		//STRING
		public RuleCall getArgsSTRINGTerminalRuleCall_0_2_1_0() { return cArgsSTRINGTerminalRuleCall_0_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_3() { return cRightSquareBracketKeyword_0_3; }
		
		//'[' ']'
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_1() { return cRightSquareBracketKeyword_1_1; }
	}
	public class SpaceArgsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydocker.MyDocker.SpaceArgs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cValueParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cValueParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//SpaceArgs:
		//    Value (Value)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Value (Value)*
		public Group getGroup() { return cGroup; }
		
		//Value
		public RuleCall getValueParserRuleCall_0() { return cValueParserRuleCall_0; }
		
		//(Value)*
		public RuleCall getValueParserRuleCall_1() { return cValueParserRuleCall_1; }
	}
	public class NameValsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydocker.MyDocker.NameVals");
		private final Assignment cValuesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValuesNameValParserRuleCall_0 = (RuleCall)cValuesAssignment.eContents().get(0);
		
		//NameVals:
		//    (values+=NameVal)+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(values+=NameVal)+
		public Assignment getValuesAssignment() { return cValuesAssignment; }
		
		//NameVal
		public RuleCall getValuesNameValParserRuleCall_0() { return cValuesNameValParserRuleCall_0; }
	}
	public class NameValElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydocker.MyDocker.NameVal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cKeyAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cKeyIDTerminalRuleCall_0_0_0 = (RuleCall)cKeyAssignment_0_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueValueParserRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cKeyAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cKeyIDTerminalRuleCall_1_0_0 = (RuleCall)cKeyAssignment_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cValueAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cValueValueParserRuleCall_1_2_0 = (RuleCall)cValueAssignment_1_2.eContents().get(0);
		
		//NameVal:
		//    (key=ID value=Value) | (key=ID'='value=Value)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(key=ID value=Value) | (key=ID'='value=Value)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(key=ID value=Value)
		public Group getGroup_0() { return cGroup_0; }
		
		//key=ID
		public Assignment getKeyAssignment_0_0() { return cKeyAssignment_0_0; }
		
		//ID
		public RuleCall getKeyIDTerminalRuleCall_0_0_0() { return cKeyIDTerminalRuleCall_0_0_0; }
		
		//value=Value
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_0_1_0() { return cValueValueParserRuleCall_0_1_0; }
		
		//(key=ID'='value=Value)
		public Group getGroup_1() { return cGroup_1; }
		
		//key=ID
		public Assignment getKeyAssignment_1_0() { return cKeyAssignment_1_0; }
		
		//ID
		public RuleCall getKeyIDTerminalRuleCall_1_0_0() { return cKeyIDTerminalRuleCall_1_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }
		
		//value=Value
		public Assignment getValueAssignment_1_2() { return cValueAssignment_1_2; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_1_2_0() { return cValueValueParserRuleCall_1_2_0; }
	}
	public class ArgArgsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydocker.MyDocker.ArgArgs");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cArgArgsAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueValueParserRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Assignment cValuesAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValuesNameValsParserRuleCall_1_0 = (RuleCall)cValuesAssignment_1.eContents().get(0);
		
		//ArgArgs:
		//    {ArgArgs} value=Value | values=NameVals
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{ArgArgs} value=Value | values=NameVals
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{ArgArgs} value=Value
		public Group getGroup_0() { return cGroup_0; }
		
		//{ArgArgs}
		public Action getArgArgsAction_0_0() { return cArgArgsAction_0_0; }
		
		//value=Value
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_0_1_0() { return cValueValueParserRuleCall_0_1_0; }
		
		//values=NameVals
		public Assignment getValuesAssignment_1() { return cValuesAssignment_1; }
		
		//NameVals
		public RuleCall getValuesNameValsParserRuleCall_1_0() { return cValuesNameValsParserRuleCall_1_0; }
	}
	public class HealthArgsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydocker.MyDocker.HealthArgs");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTypAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cTypNoneKeyword_0_0 = (Keyword)cTypAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cOptionsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOptionsOptionsParserRuleCall_1_0_0 = (RuleCall)cOptionsAssignment_1_0.eContents().get(0);
		private final Keyword cCMDKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cCmdArgsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cCmdArgsCommandArgsParserRuleCall_1_2_0 = (RuleCall)cCmdArgsAssignment_1_2.eContents().get(0);
		
		//HealthArgs:
		//    typ='None' |
		//    options=Options 'CMD' cmdArgs=CommandArgs
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//typ='None' |
		//options=Options 'CMD' cmdArgs=CommandArgs
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//typ='None'
		public Assignment getTypAssignment_0() { return cTypAssignment_0; }
		
		//'None'
		public Keyword getTypNoneKeyword_0_0() { return cTypNoneKeyword_0_0; }
		
		//options=Options 'CMD' cmdArgs=CommandArgs
		public Group getGroup_1() { return cGroup_1; }
		
		//options=Options
		public Assignment getOptionsAssignment_1_0() { return cOptionsAssignment_1_0; }
		
		//Options
		public RuleCall getOptionsOptionsParserRuleCall_1_0_0() { return cOptionsOptionsParserRuleCall_1_0_0; }
		
		//'CMD'
		public Keyword getCMDKeyword_1_1() { return cCMDKeyword_1_1; }
		
		//cmdArgs=CommandArgs
		public Assignment getCmdArgsAssignment_1_2() { return cCmdArgsAssignment_1_2; }
		
		//CommandArgs
		public RuleCall getCmdArgsCommandArgsParserRuleCall_1_2_0() { return cCmdArgsCommandArgsParserRuleCall_1_2_0; }
	}
	public class OptionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydocker.MyDocker.Options");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOptionsAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOptionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOptionsOptionParserRuleCall_1_0 = (RuleCall)cOptionsAssignment_1.eContents().get(0);
		
		//Options:
		//    {Options} (options+=Option)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Options} (options+=Option)*
		public Group getGroup() { return cGroup; }
		
		//{Options}
		public Action getOptionsAction_0() { return cOptionsAction_0; }
		
		//(options+=Option)*
		public Assignment getOptionsAssignment_1() { return cOptionsAssignment_1; }
		
		//Option
		public RuleCall getOptionsOptionParserRuleCall_1_0() { return cOptionsOptionParserRuleCall_1_0; }
	}
	public class OptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydocker.MyDocker.Option");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOptionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOptionIDTerminalRuleCall_1_0 = (RuleCall)cOptionAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueValueParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//Option:
		//    '--' option=ID'='value=Value
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'--' option=ID'='value=Value
		public Group getGroup() { return cGroup; }
		
		//'--'
		public Keyword getHyphenMinusHyphenMinusKeyword_0() { return cHyphenMinusHyphenMinusKeyword_0; }
		
		//option=ID
		public Assignment getOptionAssignment_1() { return cOptionAssignment_1; }
		
		//ID
		public RuleCall getOptionIDTerminalRuleCall_1_0() { return cOptionIDTerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//value=Value
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_3_0() { return cValueValueParserRuleCall_3_0; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydocker.MyDocker.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRAW_VALUETerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Value:
		//    STRING | ID | RAW_VALUE
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID | RAW_VALUE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
		
		//RAW_VALUE
		public RuleCall getRAW_VALUETerminalRuleCall_2() { return cRAW_VALUETerminalRuleCall_2; }
	}
	public class ExposeArgsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydocker.MyDocker.ExposeArgs");
		private final Assignment cPortsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPortsExposeArgParserRuleCall_0 = (RuleCall)cPortsAssignment.eContents().get(0);
		
		//ExposeArgs:
		//    (ports+=ExposeArg)+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(ports+=ExposeArg)+
		public Assignment getPortsAssignment() { return cPortsAssignment; }
		
		//ExposeArg
		public RuleCall getPortsExposeArgParserRuleCall_0() { return cPortsExposeArgParserRuleCall_0; }
	}
	public class ExposeArgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydocker.MyDocker.ExposeArg");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cPortAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cPortINTTerminalRuleCall_0_0 = (RuleCall)cPortAssignment_0.eContents().get(0);
		private final Assignment cPort_protocolAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cPort_protocolEXPOSE_PORT_PROTOCOLTerminalRuleCall_1_0 = (RuleCall)cPort_protocolAssignment_1.eContents().get(0);
		
		//ExposeArg:
		//    port=INT | (port_protocol=EXPOSE_PORT_PROTOCOL)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//port=INT | (port_protocol=EXPOSE_PORT_PROTOCOL)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//port=INT
		public Assignment getPortAssignment_0() { return cPortAssignment_0; }
		
		//INT
		public RuleCall getPortINTTerminalRuleCall_0_0() { return cPortINTTerminalRuleCall_0_0; }
		
		//(port_protocol=EXPOSE_PORT_PROTOCOL)
		public Assignment getPort_protocolAssignment_1() { return cPort_protocolAssignment_1; }
		
		//EXPOSE_PORT_PROTOCOL
		public RuleCall getPort_protocolEXPOSE_PORT_PROTOCOLTerminalRuleCall_1_0() { return cPort_protocolEXPOSE_PORT_PROTOCOLTerminalRuleCall_1_0; }
	}
	
	
	private final DockerElements pDocker;
	private final CommandElements pCommand;
	private final AddElements pAdd;
	private final ArgElements pArg;
	private final CmdElements pCmd;
	private final CopyElements pCopy;
	private final EntrypointElements pEntrypoint;
	private final EnvElements pEnv;
	private final ExposeElements pExpose;
	private final FromElements pFrom;
	private final HealthcheckElements pHealthcheck;
	private final LabelElements pLabel;
	private final MaintainerElements pMaintainer;
	private final OnbuildElements pOnbuild;
	private final RunElements pRun;
	private final ShellElements pShell;
	private final StopSignalElements pStopSignal;
	private final UserElements pUser;
	private final VolumeElements pVolume;
	private final WorkdirElements pWorkdir;
	private final CommandArgsElements pCommandArgs;
	private final JSONArgsElements pJSONArgs;
	private final SpaceArgsElements pSpaceArgs;
	private final NameValsElements pNameVals;
	private final NameValElements pNameVal;
	private final ArgArgsElements pArgArgs;
	private final HealthArgsElements pHealthArgs;
	private final OptionsElements pOptions;
	private final OptionElements pOption;
	private final ValueElements pValue;
	private final ExposeArgsElements pExposeArgs;
	private final ExposeArgElements pExposeArg;
	private final TerminalRule tEXPOSE_PORT_PROTOCOL;
	private final TerminalRule tRAW_VALUE;
	private final TerminalRule tSH_COMMENT;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDockerGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDocker = new DockerElements();
		this.pCommand = new CommandElements();
		this.pAdd = new AddElements();
		this.pArg = new ArgElements();
		this.pCmd = new CmdElements();
		this.pCopy = new CopyElements();
		this.pEntrypoint = new EntrypointElements();
		this.pEnv = new EnvElements();
		this.pExpose = new ExposeElements();
		this.pFrom = new FromElements();
		this.pHealthcheck = new HealthcheckElements();
		this.pLabel = new LabelElements();
		this.pMaintainer = new MaintainerElements();
		this.pOnbuild = new OnbuildElements();
		this.pRun = new RunElements();
		this.pShell = new ShellElements();
		this.pStopSignal = new StopSignalElements();
		this.pUser = new UserElements();
		this.pVolume = new VolumeElements();
		this.pWorkdir = new WorkdirElements();
		this.pCommandArgs = new CommandArgsElements();
		this.pJSONArgs = new JSONArgsElements();
		this.pSpaceArgs = new SpaceArgsElements();
		this.pNameVals = new NameValsElements();
		this.pNameVal = new NameValElements();
		this.pArgArgs = new ArgArgsElements();
		this.pHealthArgs = new HealthArgsElements();
		this.pOptions = new OptionsElements();
		this.pOption = new OptionElements();
		this.pValue = new ValueElements();
		this.pExposeArgs = new ExposeArgsElements();
		this.pExposeArg = new ExposeArgElements();
		this.tEXPOSE_PORT_PROTOCOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydocker.MyDocker.EXPOSE_PORT_PROTOCOL");
		this.tRAW_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydocker.MyDocker.RAW_VALUE");
		this.tSH_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydocker.MyDocker.SH_COMMENT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydocker.MyDocker".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Docker hidden(WS, ML_COMMENT, SH_COMMENT):
	//    (commands+=Command)*;
	public DockerElements getDockerAccess() {
		return pDocker;
	}
	
	public ParserRule getDockerRule() {
		return getDockerAccess().getRule();
	}
	
	//Command:
	//    Add | Arg | Cmd | Copy | Entrypoint | Env |
	//    Expose | From | Healthcheck | Label |
	//    Maintainer | Onbuild | Run | Shell |
	//    StopSignal | User | Volume | Workdir
	//;
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}
	
	//Add:
	//    cmd='ADD' args=CommandArgs
	//;
	public AddElements getAddAccess() {
		return pAdd;
	}
	
	public ParserRule getAddRule() {
		return getAddAccess().getRule();
	}
	
	//Arg:
	//    cmd='ARG' args=ArgArgs
	//;
	public ArgElements getArgAccess() {
		return pArg;
	}
	
	public ParserRule getArgRule() {
		return getArgAccess().getRule();
	}
	
	//Cmd:
	//    cmd='CMD' args=CommandArgs
	//;
	public CmdElements getCmdAccess() {
		return pCmd;
	}
	
	public ParserRule getCmdRule() {
		return getCmdAccess().getRule();
	}
	
	//Copy:
	//    cmd='COPY' args=CommandArgs
	//;
	public CopyElements getCopyAccess() {
		return pCopy;
	}
	
	public ParserRule getCopyRule() {
		return getCopyAccess().getRule();
	}
	
	//Entrypoint:
	//    cmd='ENTRYPOINT' args=JSONArgs
	//;
	public EntrypointElements getEntrypointAccess() {
		return pEntrypoint;
	}
	
	public ParserRule getEntrypointRule() {
		return getEntrypointAccess().getRule();
	}
	
	//Env:
	//    cmd='ENV' args=NameVals
	//;
	public EnvElements getEnvAccess() {
		return pEnv;
	}
	
	public ParserRule getEnvRule() {
		return getEnvAccess().getRule();
	}
	
	//Expose:
	//    cmd='EXPOSE' args=ExposeArgs
	//;
	public ExposeElements getExposeAccess() {
		return pExpose;
	}
	
	public ParserRule getExposeRule() {
		return getExposeAccess().getRule();
	}
	
	//From:
	//    cmd='FROM' args=CommandArgs
	//;
	public FromElements getFromAccess() {
		return pFrom;
	}
	
	public ParserRule getFromRule() {
		return getFromAccess().getRule();
	}
	
	//Healthcheck:
	//    cmd='HEALTHCHECK' args=HealthArgs
	//;
	public HealthcheckElements getHealthcheckAccess() {
		return pHealthcheck;
	}
	
	public ParserRule getHealthcheckRule() {
		return getHealthcheckAccess().getRule();
	}
	
	//Label:
	//    cmd='LABEL' args=NameVals
	//;
	public LabelElements getLabelAccess() {
		return pLabel;
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}
	
	//Maintainer:
	//    cmd='MAINTAINER' args=Value
	//;
	public MaintainerElements getMaintainerAccess() {
		return pMaintainer;
	}
	
	public ParserRule getMaintainerRule() {
		return getMaintainerAccess().getRule();
	}
	
	//Onbuild:
	//    cmd='ONBUILD' args=ID
	//;
	public OnbuildElements getOnbuildAccess() {
		return pOnbuild;
	}
	
	public ParserRule getOnbuildRule() {
		return getOnbuildAccess().getRule();
	}
	
	//Run:
	//    cmd='RUN' args=CommandArgs
	//;
	public RunElements getRunAccess() {
		return pRun;
	}
	
	public ParserRule getRunRule() {
		return getRunAccess().getRule();
	}
	
	//Shell:
	//    cmd='SHELL' args=JSONArgs
	//;
	public ShellElements getShellAccess() {
		return pShell;
	}
	
	public ParserRule getShellRule() {
		return getShellAccess().getRule();
	}
	
	//StopSignal:
	//    cmd='STOPSIGNAL' args=STRING
	//;
	public StopSignalElements getStopSignalAccess() {
		return pStopSignal;
	}
	
	public ParserRule getStopSignalRule() {
		return getStopSignalAccess().getRule();
	}
	
	//User:
	//    cmd='USER' args=Value
	//;
	public UserElements getUserAccess() {
		return pUser;
	}
	
	public ParserRule getUserRule() {
		return getUserAccess().getRule();
	}
	
	//Volume:
	//    cmd='VOLUME' args=CommandArgs
	//;
	public VolumeElements getVolumeAccess() {
		return pVolume;
	}
	
	public ParserRule getVolumeRule() {
		return getVolumeAccess().getRule();
	}
	
	//Workdir:
	//    cmd='WORKDIR' args=Value
	//;
	public WorkdirElements getWorkdirAccess() {
		return pWorkdir;
	}
	
	public ParserRule getWorkdirRule() {
		return getWorkdirAccess().getRule();
	}
	
	//CommandArgs:
	//    JSONArgs | SpaceArgs
	//;
	public CommandArgsElements getCommandArgsAccess() {
		return pCommandArgs;
	}
	
	public ParserRule getCommandArgsRule() {
		return getCommandArgsAccess().getRule();
	}
	
	//JSONArgs:
	//    '[' (args+=STRING) (',' (args+=STRING))* ']'
	//    | '[' ']'
	//;
	public JSONArgsElements getJSONArgsAccess() {
		return pJSONArgs;
	}
	
	public ParserRule getJSONArgsRule() {
		return getJSONArgsAccess().getRule();
	}
	
	//SpaceArgs:
	//    Value (Value)*
	//;
	public SpaceArgsElements getSpaceArgsAccess() {
		return pSpaceArgs;
	}
	
	public ParserRule getSpaceArgsRule() {
		return getSpaceArgsAccess().getRule();
	}
	
	//NameVals:
	//    (values+=NameVal)+
	//;
	public NameValsElements getNameValsAccess() {
		return pNameVals;
	}
	
	public ParserRule getNameValsRule() {
		return getNameValsAccess().getRule();
	}
	
	//NameVal:
	//    (key=ID value=Value) | (key=ID'='value=Value)
	//;
	public NameValElements getNameValAccess() {
		return pNameVal;
	}
	
	public ParserRule getNameValRule() {
		return getNameValAccess().getRule();
	}
	
	//ArgArgs:
	//    {ArgArgs} value=Value | values=NameVals
	//;
	public ArgArgsElements getArgArgsAccess() {
		return pArgArgs;
	}
	
	public ParserRule getArgArgsRule() {
		return getArgArgsAccess().getRule();
	}
	
	//HealthArgs:
	//    typ='None' |
	//    options=Options 'CMD' cmdArgs=CommandArgs
	//;
	public HealthArgsElements getHealthArgsAccess() {
		return pHealthArgs;
	}
	
	public ParserRule getHealthArgsRule() {
		return getHealthArgsAccess().getRule();
	}
	
	//Options:
	//    {Options} (options+=Option)*
	//;
	public OptionsElements getOptionsAccess() {
		return pOptions;
	}
	
	public ParserRule getOptionsRule() {
		return getOptionsAccess().getRule();
	}
	
	//Option:
	//    '--' option=ID'='value=Value
	//;
	public OptionElements getOptionAccess() {
		return pOption;
	}
	
	public ParserRule getOptionRule() {
		return getOptionAccess().getRule();
	}
	
	//Value:
	//    STRING | ID | RAW_VALUE
	//;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//ExposeArgs:
	//    (ports+=ExposeArg)+
	//;
	public ExposeArgsElements getExposeArgsAccess() {
		return pExposeArgs;
	}
	
	public ParserRule getExposeArgsRule() {
		return getExposeArgsAccess().getRule();
	}
	
	//ExposeArg:
	//    port=INT | (port_protocol=EXPOSE_PORT_PROTOCOL)
	//;
	public ExposeArgElements getExposeArgAccess() {
		return pExposeArg;
	}
	
	public ParserRule getExposeArgRule() {
		return getExposeArgAccess().getRule();
	}
	
	//terminal EXPOSE_PORT_PROTOCOL:
	//    ('0' .. '9')+ '/' ('a'..'z'|'_'|'-')+
	//;
	public TerminalRule getEXPOSE_PORT_PROTOCOLRule() {
		return tEXPOSE_PORT_PROTOCOL;
	}
	
	//terminal RAW_VALUE:
	//    ('a'..'z'|'A'..'Z'|'_'|'-'|'/'|'.'|'\\') ('a'..'z'|'A'..'Z'|'_'|'-'|'0'..'9'|'/'|'.'|'\\'|':')*
	//;
	public TerminalRule getRAW_VALUERule() {
		return tRAW_VALUE;
	}
	
	//terminal SH_COMMENT:
	//    '#' !('\n'|'\r')* ('\r'? '\n')?
	//;
	public TerminalRule getSH_COMMENTRule() {
		return tSH_COMMENT;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
