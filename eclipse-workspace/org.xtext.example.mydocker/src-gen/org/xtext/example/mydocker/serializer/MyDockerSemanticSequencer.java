/*
 * generated by Xtext 2.30.0
 */
package org.xtext.example.mydocker.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydocker.myDocker.Add;
import org.xtext.example.mydocker.myDocker.Arg;
import org.xtext.example.mydocker.myDocker.ArgArgs;
import org.xtext.example.mydocker.myDocker.Cmd;
import org.xtext.example.mydocker.myDocker.Copy;
import org.xtext.example.mydocker.myDocker.Docker;
import org.xtext.example.mydocker.myDocker.Entrypoint;
import org.xtext.example.mydocker.myDocker.Env;
import org.xtext.example.mydocker.myDocker.Expose;
import org.xtext.example.mydocker.myDocker.ExposeArg;
import org.xtext.example.mydocker.myDocker.ExposeArgs;
import org.xtext.example.mydocker.myDocker.From;
import org.xtext.example.mydocker.myDocker.HealthArgs;
import org.xtext.example.mydocker.myDocker.Healthcheck;
import org.xtext.example.mydocker.myDocker.JSONArgs;
import org.xtext.example.mydocker.myDocker.Label;
import org.xtext.example.mydocker.myDocker.Maintainer;
import org.xtext.example.mydocker.myDocker.MyDockerPackage;
import org.xtext.example.mydocker.myDocker.NameVal;
import org.xtext.example.mydocker.myDocker.NameVals;
import org.xtext.example.mydocker.myDocker.Onbuild;
import org.xtext.example.mydocker.myDocker.Option;
import org.xtext.example.mydocker.myDocker.Options;
import org.xtext.example.mydocker.myDocker.Run;
import org.xtext.example.mydocker.myDocker.Shell;
import org.xtext.example.mydocker.myDocker.StopSignal;
import org.xtext.example.mydocker.myDocker.User;
import org.xtext.example.mydocker.myDocker.Volume;
import org.xtext.example.mydocker.myDocker.Workdir;
import org.xtext.example.mydocker.services.MyDockerGrammarAccess;

@SuppressWarnings("all")
public class MyDockerSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDockerGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyDockerPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyDockerPackage.ADD:
				sequence_Add(context, (Add) semanticObject); 
				return; 
			case MyDockerPackage.ARG:
				sequence_Arg(context, (Arg) semanticObject); 
				return; 
			case MyDockerPackage.ARG_ARGS:
				sequence_ArgArgs(context, (ArgArgs) semanticObject); 
				return; 
			case MyDockerPackage.CMD:
				sequence_Cmd(context, (Cmd) semanticObject); 
				return; 
			case MyDockerPackage.COPY:
				sequence_Copy(context, (Copy) semanticObject); 
				return; 
			case MyDockerPackage.DOCKER:
				sequence_Docker(context, (Docker) semanticObject); 
				return; 
			case MyDockerPackage.ENTRYPOINT:
				sequence_Entrypoint(context, (Entrypoint) semanticObject); 
				return; 
			case MyDockerPackage.ENV:
				sequence_Env(context, (Env) semanticObject); 
				return; 
			case MyDockerPackage.EXPOSE:
				sequence_Expose(context, (Expose) semanticObject); 
				return; 
			case MyDockerPackage.EXPOSE_ARG:
				sequence_ExposeArg(context, (ExposeArg) semanticObject); 
				return; 
			case MyDockerPackage.EXPOSE_ARGS:
				sequence_ExposeArgs(context, (ExposeArgs) semanticObject); 
				return; 
			case MyDockerPackage.FROM:
				sequence_From(context, (From) semanticObject); 
				return; 
			case MyDockerPackage.HEALTH_ARGS:
				sequence_HealthArgs(context, (HealthArgs) semanticObject); 
				return; 
			case MyDockerPackage.HEALTHCHECK:
				sequence_Healthcheck(context, (Healthcheck) semanticObject); 
				return; 
			case MyDockerPackage.JSON_ARGS:
				sequence_JSONArgs(context, (JSONArgs) semanticObject); 
				return; 
			case MyDockerPackage.LABEL:
				sequence_Label(context, (Label) semanticObject); 
				return; 
			case MyDockerPackage.MAINTAINER:
				sequence_Maintainer(context, (Maintainer) semanticObject); 
				return; 
			case MyDockerPackage.NAME_VAL:
				sequence_NameVal(context, (NameVal) semanticObject); 
				return; 
			case MyDockerPackage.NAME_VALS:
				sequence_NameVals(context, (NameVals) semanticObject); 
				return; 
			case MyDockerPackage.ONBUILD:
				sequence_Onbuild(context, (Onbuild) semanticObject); 
				return; 
			case MyDockerPackage.OPTION:
				sequence_Option(context, (Option) semanticObject); 
				return; 
			case MyDockerPackage.OPTIONS:
				sequence_Options(context, (Options) semanticObject); 
				return; 
			case MyDockerPackage.RUN:
				sequence_Run(context, (Run) semanticObject); 
				return; 
			case MyDockerPackage.SHELL:
				sequence_Shell(context, (Shell) semanticObject); 
				return; 
			case MyDockerPackage.STOP_SIGNAL:
				sequence_StopSignal(context, (StopSignal) semanticObject); 
				return; 
			case MyDockerPackage.USER:
				sequence_User(context, (User) semanticObject); 
				return; 
			case MyDockerPackage.VOLUME:
				sequence_Volume(context, (Volume) semanticObject); 
				return; 
			case MyDockerPackage.WORKDIR:
				sequence_Workdir(context, (Workdir) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Command returns Add
	 *     Add returns Add
	 *
	 * Constraint:
	 *     (cmd='ADD' args=CommandArgs)
	 * </pre>
	 */
	protected void sequence_Add(ISerializationContext context, Add semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDockerPackage.Literals.COMMAND__CMD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDockerPackage.Literals.COMMAND__CMD));
			if (transientValues.isValueTransient(semanticObject, MyDockerPackage.Literals.ADD__ARGS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDockerPackage.Literals.ADD__ARGS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAddAccess().getCmdADDKeyword_0_0(), semanticObject.getCmd());
		feeder.accept(grammarAccess.getAddAccess().getArgsCommandArgsParserRuleCall_1_0(), semanticObject.getArgs());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ArgArgs returns ArgArgs
	 *
	 * Constraint:
	 *     (value=Value | values=NameVals)
	 * </pre>
	 */
	protected void sequence_ArgArgs(ISerializationContext context, ArgArgs semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Command returns Arg
	 *     Arg returns Arg
	 *
	 * Constraint:
	 *     (cmd='ARG' args=ArgArgs)
	 * </pre>
	 */
	protected void sequence_Arg(ISerializationContext context, Arg semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDockerPackage.Literals.COMMAND__CMD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDockerPackage.Literals.COMMAND__CMD));
			if (transientValues.isValueTransient(semanticObject, MyDockerPackage.Literals.ARG__ARGS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDockerPackage.Literals.ARG__ARGS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getArgAccess().getCmdARGKeyword_0_0(), semanticObject.getCmd());
		feeder.accept(grammarAccess.getArgAccess().getArgsArgArgsParserRuleCall_1_0(), semanticObject.getArgs());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Command returns Cmd
	 *     Cmd returns Cmd
	 *
	 * Constraint:
	 *     (cmd='CMD' args=CommandArgs)
	 * </pre>
	 */
	protected void sequence_Cmd(ISerializationContext context, Cmd semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDockerPackage.Literals.COMMAND__CMD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDockerPackage.Literals.COMMAND__CMD));
			if (transientValues.isValueTransient(semanticObject, MyDockerPackage.Literals.CMD__ARGS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDockerPackage.Literals.CMD__ARGS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCmdAccess().getCmdCMDKeyword_0_0(), semanticObject.getCmd());
		feeder.accept(grammarAccess.getCmdAccess().getArgsCommandArgsParserRuleCall_1_0(), semanticObject.getArgs());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Command returns Copy
	 *     Copy returns Copy
	 *
	 * Constraint:
	 *     (cmd='COPY' args=CommandArgs)
	 * </pre>
	 */
	protected void sequence_Copy(ISerializationContext context, Copy semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDockerPackage.Literals.COMMAND__CMD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDockerPackage.Literals.COMMAND__CMD));
			if (transientValues.isValueTransient(semanticObject, MyDockerPackage.Literals.COPY__ARGS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDockerPackage.Literals.COPY__ARGS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCopyAccess().getCmdCOPYKeyword_0_0(), semanticObject.getCmd());
		feeder.accept(grammarAccess.getCopyAccess().getArgsCommandArgsParserRuleCall_1_0(), semanticObject.getArgs());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Docker returns Docker
	 *
	 * Constraint:
	 *     commands+=Command+
	 * </pre>
	 */
	protected void sequence_Docker(ISerializationContext context, Docker semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Command returns Entrypoint
	 *     Entrypoint returns Entrypoint
	 *
	 * Constraint:
	 *     (cmd='ENTRYPOINT' args=JSONArgs)
	 * </pre>
	 */
	protected void sequence_Entrypoint(ISerializationContext context, Entrypoint semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDockerPackage.Literals.COMMAND__CMD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDockerPackage.Literals.COMMAND__CMD));
			if (transientValues.isValueTransient(semanticObject, MyDockerPackage.Literals.ENTRYPOINT__ARGS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDockerPackage.Literals.ENTRYPOINT__ARGS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEntrypointAccess().getCmdENTRYPOINTKeyword_0_0(), semanticObject.getCmd());
		feeder.accept(grammarAccess.getEntrypointAccess().getArgsJSONArgsParserRuleCall_1_0(), semanticObject.getArgs());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Command returns Env
	 *     Env returns Env
	 *
	 * Constraint:
	 *     (cmd='ENV' args=NameVals)
	 * </pre>
	 */
	protected void sequence_Env(ISerializationContext context, Env semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDockerPackage.Literals.COMMAND__CMD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDockerPackage.Literals.COMMAND__CMD));
			if (transientValues.isValueTransient(semanticObject, MyDockerPackage.Literals.ENV__ARGS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDockerPackage.Literals.ENV__ARGS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnvAccess().getCmdENVKeyword_0_0(), semanticObject.getCmd());
		feeder.accept(grammarAccess.getEnvAccess().getArgsNameValsParserRuleCall_1_0(), semanticObject.getArgs());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ExposeArg returns ExposeArg
	 *
	 * Constraint:
	 *     (port=INT | port_protocol=EXPOSE_PORT_PROTOCOL)
	 * </pre>
	 */
	protected void sequence_ExposeArg(ISerializationContext context, ExposeArg semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ExposeArgs returns ExposeArgs
	 *
	 * Constraint:
	 *     ports+=ExposeArg+
	 * </pre>
	 */
	protected void sequence_ExposeArgs(ISerializationContext context, ExposeArgs semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Command returns Expose
	 *     Expose returns Expose
	 *
	 * Constraint:
	 *     (cmd='EXPOSE' args=ExposeArgs)
	 * </pre>
	 */
	protected void sequence_Expose(ISerializationContext context, Expose semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDockerPackage.Literals.COMMAND__CMD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDockerPackage.Literals.COMMAND__CMD));
			if (transientValues.isValueTransient(semanticObject, MyDockerPackage.Literals.EXPOSE__ARGS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDockerPackage.Literals.EXPOSE__ARGS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExposeAccess().getCmdEXPOSEKeyword_0_0(), semanticObject.getCmd());
		feeder.accept(grammarAccess.getExposeAccess().getArgsExposeArgsParserRuleCall_1_0(), semanticObject.getArgs());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Command returns From
	 *     From returns From
	 *
	 * Constraint:
	 *     (cmd='FROM' args=CommandArgs)
	 * </pre>
	 */
	protected void sequence_From(ISerializationContext context, From semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDockerPackage.Literals.COMMAND__CMD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDockerPackage.Literals.COMMAND__CMD));
			if (transientValues.isValueTransient(semanticObject, MyDockerPackage.Literals.FROM__ARGS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDockerPackage.Literals.FROM__ARGS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFromAccess().getCmdFROMKeyword_0_0(), semanticObject.getCmd());
		feeder.accept(grammarAccess.getFromAccess().getArgsCommandArgsParserRuleCall_1_0(), semanticObject.getArgs());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     HealthArgs returns HealthArgs
	 *
	 * Constraint:
	 *     (typ='None' | (options=Options cmdArgs=CommandArgs))
	 * </pre>
	 */
	protected void sequence_HealthArgs(ISerializationContext context, HealthArgs semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Command returns Healthcheck
	 *     Healthcheck returns Healthcheck
	 *
	 * Constraint:
	 *     (cmd='HEALTHCHECK' args=HealthArgs)
	 * </pre>
	 */
	protected void sequence_Healthcheck(ISerializationContext context, Healthcheck semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDockerPackage.Literals.COMMAND__CMD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDockerPackage.Literals.COMMAND__CMD));
			if (transientValues.isValueTransient(semanticObject, MyDockerPackage.Literals.HEALTHCHECK__ARGS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDockerPackage.Literals.HEALTHCHECK__ARGS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getHealthcheckAccess().getCmdHEALTHCHECKKeyword_0_0(), semanticObject.getCmd());
		feeder.accept(grammarAccess.getHealthcheckAccess().getArgsHealthArgsParserRuleCall_1_0(), semanticObject.getArgs());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     CommandArgs returns JSONArgs
	 *     JSONArgs returns JSONArgs
	 *
	 * Constraint:
	 *     (args+=STRING args+=STRING*)
	 * </pre>
	 */
	protected void sequence_JSONArgs(ISerializationContext context, JSONArgs semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Command returns Label
	 *     Label returns Label
	 *
	 * Constraint:
	 *     (cmd='LABEL' args=NameVals)
	 * </pre>
	 */
	protected void sequence_Label(ISerializationContext context, Label semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDockerPackage.Literals.COMMAND__CMD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDockerPackage.Literals.COMMAND__CMD));
			if (transientValues.isValueTransient(semanticObject, MyDockerPackage.Literals.LABEL__ARGS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDockerPackage.Literals.LABEL__ARGS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLabelAccess().getCmdLABELKeyword_0_0(), semanticObject.getCmd());
		feeder.accept(grammarAccess.getLabelAccess().getArgsNameValsParserRuleCall_1_0(), semanticObject.getArgs());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Command returns Maintainer
	 *     Maintainer returns Maintainer
	 *
	 * Constraint:
	 *     (cmd='MAINTAINER' args=Value)
	 * </pre>
	 */
	protected void sequence_Maintainer(ISerializationContext context, Maintainer semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDockerPackage.Literals.COMMAND__CMD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDockerPackage.Literals.COMMAND__CMD));
			if (transientValues.isValueTransient(semanticObject, MyDockerPackage.Literals.MAINTAINER__ARGS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDockerPackage.Literals.MAINTAINER__ARGS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMaintainerAccess().getCmdMAINTAINERKeyword_0_0(), semanticObject.getCmd());
		feeder.accept(grammarAccess.getMaintainerAccess().getArgsValueParserRuleCall_1_0(), semanticObject.getArgs());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     NameVal returns NameVal
	 *
	 * Constraint:
	 *     ((key=ID value=Value) | (key=ID value=Value))
	 * </pre>
	 */
	protected void sequence_NameVal(ISerializationContext context, NameVal semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     NameVals returns NameVals
	 *
	 * Constraint:
	 *     values+=NameVal+
	 * </pre>
	 */
	protected void sequence_NameVals(ISerializationContext context, NameVals semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Command returns Onbuild
	 *     Onbuild returns Onbuild
	 *
	 * Constraint:
	 *     (cmd='ONBUILD' args=ID)
	 * </pre>
	 */
	protected void sequence_Onbuild(ISerializationContext context, Onbuild semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDockerPackage.Literals.COMMAND__CMD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDockerPackage.Literals.COMMAND__CMD));
			if (transientValues.isValueTransient(semanticObject, MyDockerPackage.Literals.ONBUILD__ARGS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDockerPackage.Literals.ONBUILD__ARGS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOnbuildAccess().getCmdONBUILDKeyword_0_0(), semanticObject.getCmd());
		feeder.accept(grammarAccess.getOnbuildAccess().getArgsIDTerminalRuleCall_1_0(), semanticObject.getArgs());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Option returns Option
	 *
	 * Constraint:
	 *     (option=ID value=Value)
	 * </pre>
	 */
	protected void sequence_Option(ISerializationContext context, Option semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDockerPackage.Literals.OPTION__OPTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDockerPackage.Literals.OPTION__OPTION));
			if (transientValues.isValueTransient(semanticObject, MyDockerPackage.Literals.OPTION__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDockerPackage.Literals.OPTION__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOptionAccess().getOptionIDTerminalRuleCall_1_0(), semanticObject.getOption());
		feeder.accept(grammarAccess.getOptionAccess().getValueValueParserRuleCall_3_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Options returns Options
	 *
	 * Constraint:
	 *     options+=Option*
	 * </pre>
	 */
	protected void sequence_Options(ISerializationContext context, Options semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Command returns Run
	 *     Run returns Run
	 *
	 * Constraint:
	 *     (cmd='RUN' args=CommandArgs)
	 * </pre>
	 */
	protected void sequence_Run(ISerializationContext context, Run semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDockerPackage.Literals.COMMAND__CMD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDockerPackage.Literals.COMMAND__CMD));
			if (transientValues.isValueTransient(semanticObject, MyDockerPackage.Literals.RUN__ARGS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDockerPackage.Literals.RUN__ARGS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRunAccess().getCmdRUNKeyword_0_0(), semanticObject.getCmd());
		feeder.accept(grammarAccess.getRunAccess().getArgsCommandArgsParserRuleCall_1_0(), semanticObject.getArgs());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Command returns Shell
	 *     Shell returns Shell
	 *
	 * Constraint:
	 *     (cmd='SHELL' args=JSONArgs)
	 * </pre>
	 */
	protected void sequence_Shell(ISerializationContext context, Shell semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDockerPackage.Literals.COMMAND__CMD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDockerPackage.Literals.COMMAND__CMD));
			if (transientValues.isValueTransient(semanticObject, MyDockerPackage.Literals.SHELL__ARGS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDockerPackage.Literals.SHELL__ARGS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getShellAccess().getCmdSHELLKeyword_0_0(), semanticObject.getCmd());
		feeder.accept(grammarAccess.getShellAccess().getArgsJSONArgsParserRuleCall_1_0(), semanticObject.getArgs());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Command returns StopSignal
	 *     StopSignal returns StopSignal
	 *
	 * Constraint:
	 *     (cmd='STOPSIGNAL' args=STRING)
	 * </pre>
	 */
	protected void sequence_StopSignal(ISerializationContext context, StopSignal semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDockerPackage.Literals.COMMAND__CMD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDockerPackage.Literals.COMMAND__CMD));
			if (transientValues.isValueTransient(semanticObject, MyDockerPackage.Literals.STOP_SIGNAL__ARGS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDockerPackage.Literals.STOP_SIGNAL__ARGS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStopSignalAccess().getCmdSTOPSIGNALKeyword_0_0(), semanticObject.getCmd());
		feeder.accept(grammarAccess.getStopSignalAccess().getArgsSTRINGTerminalRuleCall_1_0(), semanticObject.getArgs());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Command returns User
	 *     User returns User
	 *
	 * Constraint:
	 *     (cmd='USER' args=Value)
	 * </pre>
	 */
	protected void sequence_User(ISerializationContext context, User semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDockerPackage.Literals.COMMAND__CMD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDockerPackage.Literals.COMMAND__CMD));
			if (transientValues.isValueTransient(semanticObject, MyDockerPackage.Literals.USER__ARGS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDockerPackage.Literals.USER__ARGS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUserAccess().getCmdUSERKeyword_0_0(), semanticObject.getCmd());
		feeder.accept(grammarAccess.getUserAccess().getArgsValueParserRuleCall_1_0(), semanticObject.getArgs());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Command returns Volume
	 *     Volume returns Volume
	 *
	 * Constraint:
	 *     (cmd='VOLUME' args=CommandArgs)
	 * </pre>
	 */
	protected void sequence_Volume(ISerializationContext context, Volume semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDockerPackage.Literals.COMMAND__CMD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDockerPackage.Literals.COMMAND__CMD));
			if (transientValues.isValueTransient(semanticObject, MyDockerPackage.Literals.VOLUME__ARGS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDockerPackage.Literals.VOLUME__ARGS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVolumeAccess().getCmdVOLUMEKeyword_0_0(), semanticObject.getCmd());
		feeder.accept(grammarAccess.getVolumeAccess().getArgsCommandArgsParserRuleCall_1_0(), semanticObject.getArgs());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Command returns Workdir
	 *     Workdir returns Workdir
	 *
	 * Constraint:
	 *     (cmd='WORKDIR' args=Value)
	 * </pre>
	 */
	protected void sequence_Workdir(ISerializationContext context, Workdir semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDockerPackage.Literals.COMMAND__CMD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDockerPackage.Literals.COMMAND__CMD));
			if (transientValues.isValueTransient(semanticObject, MyDockerPackage.Literals.WORKDIR__ARGS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDockerPackage.Literals.WORKDIR__ARGS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getWorkdirAccess().getCmdWORKDIRKeyword_0_0(), semanticObject.getCmd());
		feeder.accept(grammarAccess.getWorkdirAccess().getArgsValueParserRuleCall_1_0(), semanticObject.getArgs());
		feeder.finish();
	}
	
	
}
