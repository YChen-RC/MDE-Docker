/**
 * generated by Xtext 2.30.0
 */
package org.xtext.example.mydocker.myDocker.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydocker.myDocker.CommandArgs;
import org.xtext.example.mydocker.myDocker.HealthArgs;
import org.xtext.example.mydocker.myDocker.MyDockerPackage;
import org.xtext.example.mydocker.myDocker.Options;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Health Args</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydocker.myDocker.impl.HealthArgsImpl#getTyp <em>Typ</em>}</li>
 *   <li>{@link org.xtext.example.mydocker.myDocker.impl.HealthArgsImpl#getOptions <em>Options</em>}</li>
 *   <li>{@link org.xtext.example.mydocker.myDocker.impl.HealthArgsImpl#getCmdArgs <em>Cmd Args</em>}</li>
 * </ul>
 *
 * @generated
 */
public class HealthArgsImpl extends MinimalEObjectImpl.Container implements HealthArgs
{
  /**
   * The default value of the '{@link #getTyp() <em>Typ</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTyp()
   * @generated
   * @ordered
   */
  protected static final String TYP_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTyp() <em>Typ</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTyp()
   * @generated
   * @ordered
   */
  protected String typ = TYP_EDEFAULT;

  /**
   * The cached value of the '{@link #getOptions() <em>Options</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOptions()
   * @generated
   * @ordered
   */
  protected Options options;

  /**
   * The cached value of the '{@link #getCmdArgs() <em>Cmd Args</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCmdArgs()
   * @generated
   * @ordered
   */
  protected CommandArgs cmdArgs;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected HealthArgsImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDockerPackage.Literals.HEALTH_ARGS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getTyp()
  {
    return typ;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTyp(String newTyp)
  {
    String oldTyp = typ;
    typ = newTyp;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDockerPackage.HEALTH_ARGS__TYP, oldTyp, typ));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Options getOptions()
  {
    return options;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOptions(Options newOptions, NotificationChain msgs)
  {
    Options oldOptions = options;
    options = newOptions;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDockerPackage.HEALTH_ARGS__OPTIONS, oldOptions, newOptions);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOptions(Options newOptions)
  {
    if (newOptions != options)
    {
      NotificationChain msgs = null;
      if (options != null)
        msgs = ((InternalEObject)options).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDockerPackage.HEALTH_ARGS__OPTIONS, null, msgs);
      if (newOptions != null)
        msgs = ((InternalEObject)newOptions).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDockerPackage.HEALTH_ARGS__OPTIONS, null, msgs);
      msgs = basicSetOptions(newOptions, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDockerPackage.HEALTH_ARGS__OPTIONS, newOptions, newOptions));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CommandArgs getCmdArgs()
  {
    return cmdArgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCmdArgs(CommandArgs newCmdArgs, NotificationChain msgs)
  {
    CommandArgs oldCmdArgs = cmdArgs;
    cmdArgs = newCmdArgs;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDockerPackage.HEALTH_ARGS__CMD_ARGS, oldCmdArgs, newCmdArgs);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCmdArgs(CommandArgs newCmdArgs)
  {
    if (newCmdArgs != cmdArgs)
    {
      NotificationChain msgs = null;
      if (cmdArgs != null)
        msgs = ((InternalEObject)cmdArgs).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDockerPackage.HEALTH_ARGS__CMD_ARGS, null, msgs);
      if (newCmdArgs != null)
        msgs = ((InternalEObject)newCmdArgs).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDockerPackage.HEALTH_ARGS__CMD_ARGS, null, msgs);
      msgs = basicSetCmdArgs(newCmdArgs, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDockerPackage.HEALTH_ARGS__CMD_ARGS, newCmdArgs, newCmdArgs));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDockerPackage.HEALTH_ARGS__OPTIONS:
        return basicSetOptions(null, msgs);
      case MyDockerPackage.HEALTH_ARGS__CMD_ARGS:
        return basicSetCmdArgs(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDockerPackage.HEALTH_ARGS__TYP:
        return getTyp();
      case MyDockerPackage.HEALTH_ARGS__OPTIONS:
        return getOptions();
      case MyDockerPackage.HEALTH_ARGS__CMD_ARGS:
        return getCmdArgs();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDockerPackage.HEALTH_ARGS__TYP:
        setTyp((String)newValue);
        return;
      case MyDockerPackage.HEALTH_ARGS__OPTIONS:
        setOptions((Options)newValue);
        return;
      case MyDockerPackage.HEALTH_ARGS__CMD_ARGS:
        setCmdArgs((CommandArgs)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDockerPackage.HEALTH_ARGS__TYP:
        setTyp(TYP_EDEFAULT);
        return;
      case MyDockerPackage.HEALTH_ARGS__OPTIONS:
        setOptions((Options)null);
        return;
      case MyDockerPackage.HEALTH_ARGS__CMD_ARGS:
        setCmdArgs((CommandArgs)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDockerPackage.HEALTH_ARGS__TYP:
        return TYP_EDEFAULT == null ? typ != null : !TYP_EDEFAULT.equals(typ);
      case MyDockerPackage.HEALTH_ARGS__OPTIONS:
        return options != null;
      case MyDockerPackage.HEALTH_ARGS__CMD_ARGS:
        return cmdArgs != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (typ: ");
    result.append(typ);
    result.append(')');
    return result.toString();
  }

} //HealthArgsImpl
