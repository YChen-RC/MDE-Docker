/*
 * generated by Xtext 2.30.0
 */
package org.xtext.example.mydocker.validation;

import java.util.HashMap;
import java.util.Map;

import org.eclipse.xtext.validation.Check;
import org.xtext.example.mydocker.myDocker.Arg;
import org.xtext.example.mydocker.myDocker.Command;
import org.xtext.example.mydocker.myDocker.Docker;
import org.xtext.example.mydocker.myDocker.Env;
import org.xtext.example.mydocker.myDocker.Expose;
import org.xtext.example.mydocker.myDocker.ExposeArg;
import org.xtext.example.mydocker.myDocker.Label;
import org.xtext.example.mydocker.myDocker.NameVal;
import org.xtext.example.mydocker.myDocker.NameVals;

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class MyDockerValidator extends AbstractMyDockerValidator {
	
	public static final String INVALID_NAME = "invalidName";

	@Check
	public void checkDocker(Docker docker) {
	}
	
	@Check
	public void checkCommand(Command cmd) {
		if (cmd instanceof Arg) {
			var arg = (Arg)cmd;
			if (arg.getArgs().getValue().isEmpty() && arg.getArgs().getValues().getValues().isEmpty()) {
				error("ARG argument should not empty", null);	
			}
		}
	}
	
	@Check
	public void checkExposePortNotEmpty(Expose expose) {
		if (expose.getArgs().getPorts().isEmpty()) {
			error("port should be set", null);
		}
		
		for(ExposeArg port:expose.getArgs().getPorts()) {
			if (port.getPort() <= 0 && port.getPort_protocol().isEmpty()) {
				error("port should be set with a positive number", null);
			} else if (port.getPort_protocol().split("/")[0].equals("0")) {
				error("port should be set", null);
			}
		}
	}
	
	@Check
	public void checkEnvNameShouldBeUpper(Env env) {	
		for(NameVal kv: env.getArgs().getValues()) {
			if (kv.getKey().isEmpty()) {
				error("name=value name should not empty", null);
			}
			if (!kv.getKey().equals(kv.getKey().toUpperCase())) {
				warning("name=value name should better be upper", null);
			}
		}
	}
	
	@Check
	public void checkLabelKeysShouldNotRepeat(Docker docker) {
		Map<String, String> labels = new HashMap<String, String>();
		for (Command cmd: docker.getCommands()) {
			if (cmd instanceof Label) {
				var label = (Label)cmd;
				for(NameVal kv: label.getArgs().getValues()) {
					var key = kv.getKey();
					if (key.isEmpty()) {
						error("name=value name should not empty", null);
					}
					if (labels.containsKey(key)) {
						warning("label has same key " + key, null);
					}
				}		
			}
		}		
	}
	
	
}
